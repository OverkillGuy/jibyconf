#+TITLE: Bash utilities
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:shell :tangle-mode (identity #o755)
#+PROPERTY: header-args:shell :shebang "#!/usr/bin/env bash\n#AUTHOR: Jb Doyon<jb@jiby.tech>\n# https://redsymbol.net/articles/unofficial-bash-strict-mode/\nset -euo pipefail\n"

* Common bash aliases
:PROPERTIES:
:header-args:shell: :shebang "#!/usr/bin/env bash\n#AUTHOR: Jb Doyon<jb@jiby.tech>"
:header-args:shell: :tangle bash/.jb_profile.sh
:END:
Aliases and functions that go into the =bashrc= file, which means they
can't declare the bash strict mode, or any error on the shell sourcing
them would exit as soon as a command fails.

#+BEGIN_SRC shell
alias ll='ls -al --color=auto'
#+END_SRC

#+CAPTION: Show files above 128MB
#+BEGIN_SRC shell
alias fbig="find . -size +128M -type f -exec ls -sSh {} +"
#+END_SRC

#+CAPTION: Files under folder X more recent than Y
#+BEGIN_SRC shell
function fnew () {
    FIND_PATH=$1
    shift
    find $FIND_PATH -type f -newermt "$*"
}
#+END_SRC


* Emacs aliases
I sometimes want to open emacs (server-mode) from the command line,
and typing "emacsclient" is annoying. I wish I could use =VISUAL= for
curses-based text editor, but most systems hardcode use of =EDITOR=
instead. Separate shortcuts for in-terminal client (=e=), or potentially
GUI one (=ev=).


#+BEGIN_SRC shell :tangle bash/.jb_profile.sh :shebang "#!/usr/bin/env bash\n#AUTHOR: Jb Doyon<jb@jiby.tech>\n"
export EDITOR="emacsclient"
alias e="emacsclient -nw"
alias ev="emacsclient"
alias emd="emacs --daemon"
alias emk="killall emacs"
#+END_SRC

** Pipe to emacs
:PROPERTIES:
:CREATED:  [2019-06-12 Wed 11:09]
:ID:       6fc51204-bdbd-480a-832f-ce82595514ef
:SOURCE:   https://stackoverflow.com/a/48301066
:END:


#+begin_src shell :tangle bash/.jb_profile.sh :shebang "#!/usr/bin/env bash\n#AUTHOR: Jb Doyon<jb@jiby.tech>\n"
emp () {
    f=$(mktemp)
    cat > $f
    emacsclient $f
    rm -v $f
}
#+end_src

#+begin_src shell :tangle no
svn diff | emp
#+end_src

** Calculator
#+BEGIN_SRC shell :tangle bash/.jb_profile.sh :shebang "#!/usr/bin/env bash\n#AUTHOR: Jb Doyon<jb@jiby.tech>\n"
alias calc="emacsclient -nw -e '(calc)'"
#+END_SRC

** Magit
:PROPERTIES:
:SOURCE:   https://www.reddit.com/r/emacs/comments/9b1bhs/emacsshell_protip_alias_magit/
:END:
Type =magit= to get a terminal showing the repo.
See the [[file:config.org::*Magit][magit]] entry for what the hell =magit= is.

#+BEGIN_SRC shell :tangle bash/.jb_profile.sh :shebang "#!/usr/bin/env bash\n#AUTHOR: Jb Doyon<jb@jiby.tech>\n"
alias magit='emacsclient -nw -a emacs -e "(progn (magit-status) (delete-other-windows))"'
#+END_SRC


** Web browser
:PROPERTIES:
:CREATED:  [2019-07-21 Sun 13:00]
:ID:       8ede2f65-8504-4220-bccd-7f86dfd975c2
:END:
#+BEGIN_SRC shell :tangle bash/.jb_profile.sh :shebang "#!/usr/bin/env bash\n#AUTHOR: Jb Doyon<jb@jiby.tech>\n"
function eww () {
    emacsclient -nw -e "(eww \"$@\")"
}
#+END_SRC
Need to figure out a way to get interactive prompting of URL/search
terms, like =eww= does usually, instead of current behaviour of that
script, which fails when no URL is given.
** Mailto handler
:PROPERTIES:
:CREATED:  [2019-07-25 Thu 22:50]
:ID:       c4c3e566-bd06-4e02-bf31-65db1ffca761
:SOURCE:   https://www.emacswiki.org/emacs/MailtoHandler
:END:
Point Firefox and =xdg-open= to this command.
#+begin_src shell :tangle emacs/bin/email :shebang "#!/usr/bin/env bash\n"
emacsclient -c --eval "(browse-url-mail \"$@\")"
#+end_src
* De-google repo
:PROPERTIES:
:header-args:shell: :tangle git/bin/degooglerepo
:END:
I have an aversion to google repo tool, which breaks all my stuff.

#+BEGIN_SRC shell
function usage() {
    cat  <<EOF
Usage: $0 manifest

Converts a Google repo manifest.xml to a list of git clone commands printed to stdout
EOF
    exit 1

}

if [[ $# -lt 1 ]];
then
    usage
fi

#+END_SRC
Let's document some of the assumptions we have which might break down
for other uses.

#+BEGIN_SRC shell
# Assumptions:
# - manifest uses regex project on each of the repo xml lines
# - manifest xml entries are each on their own lines
# - xml tags for entries are doublequote-separated string fields
# - xml tag fields are ordered REPO-PATH-TAG
# - all repos live under ssh://git/ (whatever your ~/.ssh/config says about it)
#+END_SRC

Now the usage and documentation is out of the way, here's the real function

#+BEGIN_SRC shell
awk -F'"' '/project/ {print $2 " " $6 " " $4}'  $1 \
    | sed 's|refs/tags/||' \
    | awk '{print "git clone ssh://git/" $1 " -b " $2 " " $3}'
#+END_SRC

* Tangle org-mode files in bash
From Org manual [[info:org#Batch%20execution][info:org#Batch execution]].
#+BEGIN_SRC shell :tangle emacs/bin/emacs-tangle
# tangle files with org-mode

emacs -Q --batch --eval "
    (progn
      (require 'ob-tangle)
      (dolist (file command-line-args-left)
	(with-current-buffer (find-file-noselect file)
	  (org-babel-tangle))))" "$@"
#+END_SRC
* Emacs daemon systemd
:PROPERTIES:
:SOURCE:   https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/sect-managing_services_with_systemd-unit_files#exam-Managing_Services_with_systemd-Emacs_Service
:END:


Copying [[info:emacs#Emacs%20Server][manual's service]] to file:~/.config/systemd/user/
Or =/etc/systemd/system/emacs.service=

#+BEGIN_SRC conf :mkdirp yes :tangle emacs-daemon/.config/systemd/user/emacs.service
[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=simple
ExecStart=/usr/local/bin/emacs --fg-daemon
ExecStop=/usr/local/bin/emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure

[Install]
WantedBy=multi-user.target
#+END_SRC

* Password manager
Stolen from [[https://git.zx2c4.com/password-store/tree/contrib/dmenu/passmenu][zx2c4]]'s website on passmenu, split into two different
variants, type and copy, for use by keyboard bindings.

#+begin_src shell :tangle pass/bin/pass_copy
# From https://git.zx2c4.com/password-store/tree/contrib/dmenu/passmenu
shopt -s nullglob globstar

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )

password=$(printf '%s\n' "${password_files[@]}" | dmenu "$@")

[[ -n $password ]] || exit

pass show -c "$password" 2>/dev/null
#+end_src

#+begin_src shell :tangle pass/bin/pass_type
# From https://git.zx2c4.com/password-store/tree/contrib/dmenu/passmenu
shopt -s nullglob globstar

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )

password=$(printf '%s\n' "${password_files[@]}" | dmenu "$@")

[[ -n $password ]] || exit


pass show "$password" | { IFS= read -r pass; printf %s "$pass"; } \
    | xdotool type --clearmodifiers --file -
#+end_src

* Org to Remarkup

Copied from  [[https://github.com/ajtulloch/phabricator.el/blob/master/org_to_remarkup][github]], not working yet.
#+begin_src shell :tangle no

# A hacky script that converts org-mode documents to an old-style
# Remarkup dialect, used by Phabricator and other tools.



#set -x
set -e

pandoc --read=org --write=markdown  \
    | sed -e "s/-\+-/ \| /g; s/\|\s*$//g"
#         -e "s/^\|//g" \
    # --atx-headers $1 \
    # | sed -e "s/\{\.(.*)\}/lang=\1/g" \
    # -e "s/\[(.*)\]\((.*)\)/[[\2 | \1]]/g" \
    # -e "s/^####\s/====\s/g" \
    # -e "s/^###\s/===\s/g" \
    # -e "s/^##\s/==\s/g" \
    # -e "s/^#\s/=\s/g"


# "``` {.\\([a-z]+\\)}" to lang=\1
# <span class=\"label\">\\([[:ascii:]]+?\\)</span> to name="\1",
#+end_src

* Ldap search
:PROPERTIES:
:CREATED:  [2019-07-31 Wed 16:44]
:ID:       e2081adb-37de-4999-a198-e1907148fd2f
:END:

#+begin_src shell :tangle bin/contactsearch
ldapsearch -x -LLL -h ldap.someplace.com -b ou=people,dc=someplace,dc=com cn="*$@*"
#+end_src
