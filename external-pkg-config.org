#+TITLE: Configuration requiring external packages
#+PROPERTY: header-args :tangle yes :results silent

This is the subset of my emacs configuration files that require
external (non-emacs) packages. Contrast with [[file:vanilla-config.org]]
and (future) emacs-only packages sections.

* Featuregating
:PROPERTIES:
:SOURCE:   https://emacs.stackexchange.com/a/26081
:END:
Let's define a check for executable in =$PATH=, so we can featuregate
the package loading based on it, following the [[info:use-package#if%20when%20unless][use-package "if"]]
statement.

#+BEGIN_SRC emacs-lisp
(defun executable-find (command)
  "Search for COMMAND in `exec-path' and return the absolute file name.
Return nil if COMMAND is not found anywhere in `exec-path'."
  ;; Use 1 rather than file-executable-p to better match the behavior of
  ;; call-process.
  (locate-file command exec-path exec-suffixes 1))
#+END_SRC

* Ledger

#+BEGIN_SRC emacs-lisp
(use-package ledger-mode)
#+END_SRC

* PlantUml
:PROPERTIES:
:SOURCE:   http://plantuml.com/
:END:

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :config
  (setq plantuml-jar-path
	(expand-file-name "~/scripts/plantuml.jar")
	org-plantuml-jar-path plantuml-jar-path))
#+END_SRC

** Download the executable if needed
:PROPERTIES:
:SOURCE:   https://hub.docker.com/r/think/plantuml/~/dockerfile/
:END:

#+BEGIN_SRC makefile :tangle PlantUML.Makefile
PLANTUML_VERSION=1.2019.5
PLANTUML_URL=https://downloads.sourceforge.net/project/plantuml/${PLANTUML_VERSION}/plantuml.${PLANTUML_VERSION}.jar

plantuml.jar:
	wget "${PLANTUML_URL}" -O plantuml.jar
#+END_SRC

** Disable electric-indent-mode for PlantUML
:PROPERTIES:
:SOURCE:   https://stackoverflow.com/a/21183089
:END:
It incorrectly tries to put every newline two tabs away, messing up
all indentation. Disable the electric minor mode in this specific
language.

#+BEGIN_SRC emacs-lisp
(add-hook 'plantuml-mode-hook (lambda () (electric-indent-local-mode -1)))
#+END_SRC

** RGB colors
Toggle RGB coloring in plantuml when rainbow-mode is loaded.
#+BEGIN_SRC emacs-lisp
(if (and
  (featurep 'plantuml-mode)
  (featurep 'rainbow-mode))
    (add-hook 'plantuml-mode-hook 'rainbow-mode))
#+END_SRC


* RTags for C++ navigation                                     :cpp:disabled:
From [[https://github.com/dfrib/emacs_setup][this guide]]. Need to export the =compile-commands.json= file from
a CMake invokation, which requires small changes to the projects.

*** Installing RTags

Clone repo
#+BEGIN_SRC shell :tangle no
git clone --recursive https://github.com/Andersbakken/rtags.git
cd rtags
mkdir build
cd build
cmake ..
make
sudo make install
#+END_SRC


* Elpy                                                  :python:IDE:disabled:
(Don't) Use [[https://github.com/jorgenschaefer/elpy][Elpy]].
From the readme:
#+BEGIN_SRC shell :tangle no
pip install jedi flake8 importmagic autopep8
#+END_SRC
and on the emacs side of things, install their repository
#+BEGIN_SRC emacs-lisp :tangle no
(require 'package)
(add-to-list 'package-archives
             '("elpy" . "https://jorgenschaefer.github.io/packages/"))
#+END_SRC
then install the package =elpy=, and use the following conf
#+BEGIN_SRC emacs-lisp :tangle no
(elpy-enable)
#+END_SRC

Reason for disabling is it: takes over much of the native python mode
(making it harder to use a blank emacs anymore) and gives very little
useful features. It does turn emacs into an IDE experience, but at the
expense of everything that matters: speed (blocking syntax analysis
slows emacs to a crawl) and lack of configurability. It feels like
installing spacemacs: features are all in there, maybe, but I lose the
incremental feature-building "build-your-own-editor kit" that made me
choose Emacs in the first place.


* Silver searcher
Installing =silver-searcher= for quick code lookup instead of
=projectile-grep=. [[https://github.com/ggreer/the_silver_searcher][Ag link]]

#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :after ag helm)
#+END_SRC




* Offline documentation                                                 :doc:
** Helm-dash                                                       :disabled:
Use =helm-dash= in Emacs and bind it to =F6=. This actually requires
=sqlite= which isn't there by default everywhere. Disabled because I
haven't used it for a while and it's easily broken (very stateful!)

#+BEGIN_SRC emacs-lisp :tangle no
(use-package helm-dash
  :config
  (helm-dash-activate-docset "C++")
  (helm-dash-activate-docset "Python 2")
  (helm-dash-activate-docset "Docker")
  (helm-dash-activate-docset "Ansible")
  (helm-dash-activate-docset "Vagrant")
  :bind
  (("<f6>" . helm-dash-at-point)))
#+END_SRC

* Email                                                               :email:
Use =mbsync= to download server-to-maildir, =mu4e= to index/read it,
emacs SMTP client to send email back, (future) littleredflag for triggering
syncs. Password cached with =pass=.

See [[http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html][Good tutorial mbsync + mu4e + smtp emacs package]].


** Mbsync (maildir downloader)
:PROPERTIES:
:CREATED:  [2017-05-26 Fri 11:29]
:END:

Using part of [[https://wiki.archlinux.org/index.php/Isync][Archlinux wiki on mbsync]] for setup and some
try-and-fail. I've chosen to use =mbsync= (package name "isync")
instead of the more popular but slower =offlineimap=.

*** Install
:PROPERTIES:
:CREATED:  [2017-05-26 Fri 11:29]
:END:
You need to build from source to support SSL correctly (=apt-get= has
an old version of mbsync)
#+BEGIN_SRC shell :dir ~/Documents/dev-local/ :tangle no
git clone https://git.code.sf.net/p/isync/isync
#+END_SRC

Build from source
#+BEGIN_SRC shell :tangle no
cd ~/Documents/dev-local/isync
./autogen.sh
./configure
make
sudo make install
#+END_SRC

*** Setup

Create new file =~/.mbsyncrc=


Create the mailboxes just in case it didn't exist.
#+BEGIN_SRC shell :tangle no
mkdir -p ~/mail/some_mailbox/
#+END_SRC
Then run a test sync:
#+BEGIN_SRC shell :tangle no
mbsync -a
#+END_SRC

Should show no error, with instead a lot of folders being downloaded

*** TODO (Optional) IMAP IDLE script
For instant sync (rather than 5min rolling window).
See [[https://github.com/rlue/little_red_flag][little-red-flag]] or all alternatives
** mu/mu4e (mail reader)
I want to use =mu= (similar to =mutt= but recent implementation) as
mail reader. The reasons are mostly because of =mu4e=, the Emacs
integration package of =mu=.

It's a glorified searching database and file editor. Doesn't allow to
compose emails though (use any supported SMTP client)

*** Install
Get it from https://github.com/djcb/mu/releases/, needs some extra
libs, typically =libgmime-3.0-dev= and =libxapian-dev=.

Optionally, =guile-2.2=.


#+begin_src makefile :tangle generated/mu.Makefile
MU_VERSION=1.2
MU_VERSION_ALL=${MU_VERSION}.0

MU_URL=https://github.com/djcb/mu/releases/download/${MU_VERSION}/mu-${MU_VERSION_ALL}.tar.xz

default: build-mu

mu.tar.xz:
	wget "${MU_URL}" -O mu.tar.xz

mu-${MU_VERSION_ALL}: mu.tar.xz
	tar xf mu.tar.xz

build-mu: mu-${MU_VERSION_ALL}
	cd mu-${MU_VERSION_ALL} && \
	./configure && \
	make -j8 all info
	echo "Now `make install-mu`"

# Using checkinstall (https://help.ubuntu.com/community/CheckInstall)
# for tidiness
install-mu:
	cd mu-${MU_VERSION_ALL} && \
	sudo checkinstall
#+end_src

#+BEGIN_SRC shell :tangle no
make -f mu.Makefile
# ./configure && make & make info && sudo checkinstall
#+END_SRC

*** Post-build configure steps
Make sure that mu4e is accessible in emacs now. If not, copy the
=mu4e/= folder to your custom lisp folder and add the following in
emacs:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/mu4e/")
#+END_SRC

#+CAPTION Sample ~/.mbsyncrc
#+BEGIN_SRC conf :tangle no
IMAPAccount jibytech
# Address to connect to
Host imap.fastmail.com
User jb@jiby.tech
PassCmd "pass jiby.tech/fastmail/emacs_hally"
SSLType IMAPS

IMAPStore jibytech-remote
Account jibytech

MaildirStore jibytech-local
Subfolders Verbatim
# The trailing "/" is important
Path ~/.mail/jiby.tech/
Inbox ~/.mail/jiby.tech/Inbox

Channel jibytech
Master :jibytech-remote:
Slave :jibytech-local:
Patterns *
# Automatically create missing mailboxes both sides, as well as deletions
Create Both
Remove Both

# Save the synchronization state files in the relevant directory
SyncState *
#+END_SRC
*** Use
Index the maildir once

#+BEGIN_SRC shell :tangle no
mu index --maildir=~/mail/something
#+END_SRC
Then start using it !

#+BEGIN_SRC shell :tangle no
mu find some_keywords
#+END_SRC
*** Configure mu4e (emacs interface)
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/mu4e/")
(require 'mu4e)
#+END_SRC

Don't keep message buffers around

#+BEGIN_SRC emacs-lisp
(setq message-kill-buffer-on-exit t)
#+END_SRC


Don't use cool icons for display (they are cool but are not of correct
length, messing up layouts)
#+BEGIN_SRC emacs-lisp
(setq mu4e-use-fancy-chars nil)
#+END_SRC

Get email every 5 minutes
#+BEGIN_SRC emacs-lisp
(setq mu4e-update-interval 300
      mu4e-get-mail-command "mbsync -aq")
#+END_SRC

Put email attachments in Downloads folder
#+BEGIN_SRC emacs-lisp
(setq mu4e-attachment-dir  "~/Downloads")
#+END_SRC
Use =format=flowed= to wrap lines softly
#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-format-flowed t)
#+END_SRC

Enable inline images
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-images t)
;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))
#+END_SRC

Show email addresses:
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

Make mu4e default email user agent:
#+BEGIN_SRC emacs-lisp
(setq mail-user-agent 'mu4e-user-agent)
#+END_SRC

Add =mu4e= keybinding:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-4") 'mu4e)
#+END_SRC

Allow HTML email to be read via PDF when text rendering fails:
#+BEGIN_SRC emacs-lisp
(setq mu4e-msg2pdf "/usr/bin/msg2pdf")
#+END_SRC
This needs the extra debian package =maildir-utils-extra=.
Seems the variable is not bound properly.

Let me view HTML email ... in the browser.
#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
  '("bBrowser View" . mu4e-action-view-in-browser) t)
#+END_SRC

Hide the stupid empty update buffer when fetching mail:
#+BEGIN_SRC emacs-lisp
(add-hook 'mu4e~update-mail-mode-hook 'bury-buffer)
#+END_SRC

*** Email attachments

From [[info:mu4e#Dired][mu4e manual on dired interaction]], add support for attaching files
from marked files in =dired=:
#+BEGIN_SRC emacs-lisp
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
		   (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

*** Configure org-mu4e
Integration of =orgmode= and =mu4e=.

#+BEGIN_SRC emacs-lisp
(require 'org-mu4e)
#+END_SRC

Allows to make email links now.
*** Notifications
:PROPERTIES:
:SOURCE:   https://github.com/iqbalansari/mu4e-alert
:END:

#+BEGIN_SRC emacs-lisp
(use-package mu4e-alert
  :config
  (mu4e-alert-set-default-style 'libnotify)
  (mu4e-alert-enable-notifications)
  (mu4e-alert-enable-mode-line-display))
#+END_SRC
*** Capture invitations to calendar
:PROPERTIES:
:SOURCE:   https://github.com/asoroa/ical2org.py
:END:
Using =ical2org-py= to convert the file to org mode. 
Binding [[info:mu4e#Attachment%20actions][mu4e Attachment actions]] to define a key for it.
Install via pipsi in github repo. It's easiest.

#+BEGIN_SRC shell :results verbatim :tangle no
ical2orgpy --help
#+END_SRC

#+RESULTS:
#+begin_example
Usage: ical2orgpy [OPTIONS] ICS_FILE ORG_FILE

  Convert ICAL format into org-mode.

  Files can be set as explicit file name, or `-` for stdin or stdout::

      $ ical2orgpy in.ical out.org

      $ ical2orgpy in.ical - > out.org

      $ cat in.ical | ical2orgpy - out.org

      $ cat in.ical | ical2orgpy - - > out.org

Options:
  -p, --print-timezones     Print acceptable timezone names and exit.
  -d, --days INTEGER RANGE  Window length in days (left & right from current
                            time). Has to be positive.
  -t, --timezone TEXT       Timezone to use. (local timezone by default)
  -h, --help                Show this message and exit.
#+end_example

#+BEGIN_SRC emacs-lisp
(defun convert-to-org-calendar-attachment (msg attachnum)
  "Converts to org format an (ical) attachment"
  (mu4e-view-pipe-attachment msg attachnum "ical2orgpy - - >> ~/dev/notes/calendar.org"))

;; defining 'n' as the shortcut
(add-to-list 'mu4e-view-attachment-actions
	     '("cSave to calendar" . convert-to-org-calendar-attachment) t)
#+END_SRC


*** Remove HTML email backgrounds
:PROPERTIES:
:SOURCE:   https://www.reddit.com/r/emacs/comments/9ep5o1/mu4e_stop_emails_setting_backgroundforeground/
:END:

#+BEGIN_SRC emacs-lisp
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
(setq shr-color-visible-luminance-min 60)
(setq shr-color-visible-distance-min 5)
(setq shr-use-colors nil)
(advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))
#+END_SRC

#+CAPTION: Mailbox-specific setup
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir (expand-file-name "~/.mail/jiby.tech"))
(setq mu4e-drafts-folder "/Drafts")
(setq mu4e-sent-folder   "/Sent")
(setq mu4e-trash-folder  "/Trash")

(setq mu4e-maildir-shortcuts
      '(("/INBOX"        . ?i)
        ("/Sent"         . ?s)
        ("/Trash"        . ?t)
        ("/Drafts"       . ?d)))
#+END_SRC

** SMTP package to compose emails
Emacs's =smtp= package or independent tool =msmtp= which I've heard
good things about, such as support for offline email queues.

Extract from mu4e manual, adapted to my server
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)
(setq user-mail-address "FILLMEHERE@jb.jiby.tech"
   message-send-mail-function 'smtpmail-send-it
   smtpmail-starttls-credentials '(("smtp.fastmail.com" 465 nil nil))
   smtpmail-auth-credentials
     '(("smtp.fastmail.com" 587 "jb@jiby.tech" nil))
   smtpmail-default-smtp-server "smtp.fastmail.com"
   smtpmail-smtp-server "smtp.fastmail.com"
   smtpmail-smtp-service 587)
#+END_SRC

* Latex                                                                 :org:
** Live previews
We can preview LaTeX equations in =org-mode=, but this requires a few
external packages:

#+BEGIN_SRC shell :tangle no
sudo apt-get install dvipng
#+END_SRC

Then use =C-c C-x C-l= to enable latex preview in orgmode.

Try it on the following equation

$e^{2\pi i} \cos{\theta{x}+ \lambda} = -1$

** Auto-preview
:PROPERTIES:
:SOURCE:   https://www.reddit.com/r/emacs/comments/9h44lk/i_can_finally_preview_latex_in_orgmode_took_me/e6asgu9/
:END:

#+BEGIN_SRC emacs-lisp
(use-package cdlatex)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(defun auto-preview-org-latex ()
  "Toggles latex-preview when a dollar (latex equation) is followed by space"
  (when (looking-back (rx "$"))
    (save-excursion
      (backward-char 1)
      (org-toggle-latex-fragment))))

(defun preview-org-latex-hook ()
  "Hook to auto-preview latex fragments in org buffers"
  (org-cdlatex-mode)
  (add-hook 'post-self-insert-hook #'auto-preview-org-latex 'append 'local))


(add-hook 'org-mode-hook 'preview-org-latex-hook)
#+END_SRC

Preview is small, so we make it twice bigger

#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

** Export to PDF
Org mode's export to PDF option through PDFLatex
#+begin_src shell :tangle no
sudo apt-get install texlive-latex-basetex live-fonts-recommended texlive-fonts-extra
#+end_src

** Export to pdf code highlighting
:PROPERTIES:
:SOURCE:   https://joonro.github.io/blog/posts/org-mode-outputdir-minted-latex-export.html
:END:
Using =minted=. Source mixed with variable docstring for =org-latex-listings=.
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex --shell-escape --interaction nonstopmode -output-directory %o %f"
        "pdflatex --shell-escape --interaction nonstopmode -output-directory %o %f"
        "pdflatex --shell-escape --interaction nonstopmode -output-directory %o %f"))
#+END_SRC

#+begin_src shell :tangle no
sudo pip install pygment
#+end_src

** Export of bibliography
From [[file:config.org::*Bibliography][Bibliography]] entry, we use =org-ref= to support bibliography in Org
mode. By default, exporting from org-mode to PDF won't work when
references are present due to bibtex not being run. [[https://tex.stackexchange.com/questions/114864/how-to-get-bibtex-to-work-with-org-mode-latex-export][Stackoverflow]] has
found a solution by tweaking the command being run. This requires the
latexmk package: put in this file due to external (system) package
required.


#+BEGIN_SRC emacs-lisp
; Old value:
; ("pdflatex --shell-escape --interaction nonstopmode -output-directory %o %f" "pdflatex --shell-escape --interaction nonstopmode -output-directory %o %f" "pdflatex --shell-escape --interaction nonstopmode -output-directory %o %f")
(setq org-latex-pdf-process (list
   "latexmk  -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -bibtex -f  %f"))
#+END_SRC

* RFC export                                                   :rfc:disabled:
:PROPERTIES:
:SOURCE:   https://github.com/choppsv1/org-rfc-export
:END:

Export org-mode notes as RFC. Requires =xml2rfc=.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-rfc)
#+END_SRC

* Tridactyl (firefox control)
Vimperator successor: [[https://addons.mozilla.org/en-GB/firefox/addon/tridactyl-vim][Tridactyl]] ([[https://github.com/tridactyl/tridactyl][Github]]).

See sample [[https://github.com/skeeto/dotfiles/blob/master/_tridactylrc][tridactylrc on Github]] for config.

#+begin_src conf :tangle generated/.tridactylrc
bind <A-x> fillcmdline_notrail

" L is already bound to (history) forward
bind l back

bind <C-n> scrollline +3
bind <C-p> scrollline -3

bind <C-v> scrollpage
bind <C-A-v> scrollpage -1


quickmark n https://news.ycombinator.com/
quickmark y https://youtube.com/
set searchurls.s       https://duckduckgo.com/?q=%s

set editorcmd emacsclient
#+end_src
* Borg backup
[[https://www.borgbackup.org/][Borg]] is a backup system that does all I want: chunking, deduplication,
compression, and encryption.

#+begin_src shell :tangle no
sudo apt-get install borgbackup
pip install borgbackup
#+end_src

See [[https://gitlab.com/WoJ/systemd-borg/tree/master][Example systemd unit+timer]] using for Borg regularly.

#+begin_src conf :tangle generated/borg.unit
[Unit]
Description=borg backup

[Service]
Type=oneshot
Environment=BORG_REPO=/services/backup/borg/
Environment=BORG_HOSTNAME_IS_UNIQUE=yes
ExecStart=/usr/bin/borg create --exclude-from=/services/backup/borg-exclude-srv.txt --list --stats ::srv-${INVOCATION_ID} /
ExecStartPost=/usr/bin/borg prune -v --list --keep-daily=7 --keep-weekly=4 --keep-within 2d --stats
#+end_src


#+begin_src conf :tangle generated/borg.timer
[Unit]
Description=Run borg

[Timer]
OnCalendar=*-*-* 00/3:00:00

[Install]
WantedBy=timers.target
#+end_src
