#+PROPERTY: header-args :tangle init.el :results silent
#+LINK: ddgo https://duckduckgo.com/html/?q=
#+LINK: google https://duckduckgo.com/html/?q=!g
#+EXCLUDE_TAGS: noexport disabled
This is my Emacs configuration file.
It is the fruit of months of daily use and "what if I could make it
better/faster/automated ?"

Any TODO is a potential for improval.

Great resources for any emacs setup:
- [[http://doc.norang.ca/org-mode.html][NORANG init.el]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chuan's setup]]
- [[http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php][An other init.el sample]]
- [[https://ilikewhenit.works/blog/6][Simple system via use-package]]
- [[https://zeekat.nl/articles/making-emacs-work-for-me.html][Yet another guy's emacs setup]]
- [[https://www.reddit.com/r/unixporn/comments/3lp961/exwm_so_emacs_is_now_my_window_manager/cv844gf/][Cool config]]
- [[http://doc.rix.si/cce/cce-org.html][Some other config]] incl google dork for [[google: site:doc.rix.si/cce]]


* Organisation
While this git repository contains many files, this specific one is a
generic emacs configuration, applicable to all of my devices,
containing only the reasonably public elements of information.
A separate file contains more personal information such as email
configuration, chat systems, etc.

As an avid terminal user, I use [[https://termux.com/][Termux]], an Android terminal emulator.
This allows me to get emacs on the go as well as all my CLI tools. A
dedicated emacs+termux config file is [[file:termux-emacs-config.org]].

As the number of snippets I use grew, I spun them out into
[[file:snippets.org]].


* Config file setup
This file is part of a git repository that I sync across devices.
** TODO [#A] Use this orgfile as init.el                           :disabled:
Allows autoloading it.
See [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][Stackoverflow post on the topic]].
Uses the following code:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org)
(org-babel-load-file
 (expand-file-name "init.el"
                   user-emacs-directory))
#+END_SRC
Would need to make this a symlink to this file.
* Packages
** Emacs repositories
Official repos for emacs packages
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("Gnu" . "https://elpa.gnu.org/packages/")
;                        ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("Melpa" . "https://melpa.org/packages/")
			 ("Org" . "https://orgmode.org/elpa/")))
#+END_SRC
A fancy aspect of this is [[https://emacs.stackexchange.com/questions/2969/is-it-possible-to-use-both-melpa-and-melpa-stable-at-the-same-time/2976#2976][repository priority]]:
#+BEGIN_SRC emacs-lisp
(setq package-archive-priorities
      '(("Org"    . 10)
        ("Melpa"  . 5)
        ("Gnu"    . 0)))
#+END_SRC
The reasoning is that the Orgmode repository (serving only one
package, =org= at latest version) should take priority in any case,
and I trust melpa more than the (full of stale) Gnu repo.
** Use-package
Package-manager frontend called =use-package=. Setup as described on
the [[https://github.com/jwiegley/use-package/blob/master/README.md][README.md on Github]].

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
#+END_SRC

Since this package doesn't automatically download packages when they
aren't available (choosing instead to skip the package entirely),
toggle on that feature.

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

* Cosmetic                                                         :cosmetic:
** Theme
I use ~tango-dark~ and it looks great !
#+BEGIN_SRC emacs-lisp
(load-theme 'tango-dark t)
#+END_SRC

*** UTF8 everywhere                                                  :locale:
Force the use of UTF8 everywhere in emacs.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

** Disable graphical bars                                               :GUI:
Remove all the GUI tools (open,save etc) including the helpful menu
bar (which takes an entire character row !).
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
; scroll bar only available in graphics mode
(if (display-graphic-p)
    (scroll-bar-mode -1))
#+END_SRC
** Beacon
Show the cursor's position when scrolling the window, also rebind the
Pause key to make the cursor blink
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
  :diminish beacon-mode
  :bind ("<pause>" . beacon-blink))
#+END_SRC
** Hlines                                                          :disabled:
Use the form-feed package to draw horizontal lines instead of ~^L~
#+BEGIN_SRC emacs-lisp :tangle no
(use-package form-feed
  :config
  (add-hook 'org-mode-hook 'form-feed-mode))
#+END_SRC
** Nyancat for file-percentage                                     :disabled:
#+BEGIN_SRC emacs-lisp :tangle no
(use-package nyan-mode
  :config
  (add-hook 'org-mode-hook 'nyan-mode)
  (add-hook 'prog-mode-hook 'nyan-mode)
  (setq nyan-animate-nyancat t))
#+END_SRC
** Orgmode verbatim font
=Verbatim text= in org-mode should be grey, surrounded by beveled box.
Also, hide the === markers around such ~things~.

#+BEGIN_SRC emacs-lisp :tangle no
(set-face-attribute 'org-verbatim nil
                    :box
                    '(:line-width 2 :color "grey75" :style released-button)
                    :inherit
                    'shadow)
(setq org-hide-emphasis-markers t)
#+END_SRC
** Display ANSI colors
Using ~less -RS~ is perfect to see files with ANSI color codes. Emacs
can do that too, with the macro =display-ansi-colors= (from [[https://stackoverflow.com/a/23382008][stackoverflow]]).
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+END_SRC
* Backup files                                              :backup:disabled:
These files are supposed to save my life, but I can't stand them when
they're polluting my working directory.
#+BEGIN_SRC emacs-lisp :tangle no
;; Make all backups out of sight !
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  :backup-by-copying t    ; Don't delink hardlinks
  :version-control t      ; Use version numbers on backups
  :delete-old-versions t  ; Automatically delete excess backups
  :kept-new-versions 20   ; how many of the newest versions to keep
  :kept-old-versions 5    ; and how many of the old
  )
#+END_SRC

* Projectile                                            :projectile:disabled:
:PROPERTIES:
:CREATED:  [2017-10-23 Mon 13:45]
:END:
Enable =projectile=, a super smart way to manage projects, using =C-c
p= as prefix for a bunch of cool tools.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode 1))
#+END_SRC
Disabled because it disrupts existing cool features like using =F7= for
file opening now has incorrect current directory from buffer, pointing
to the project root instead. This means I can't just jump to a file
and explore its parent folder in dired.
* Orgmode                                                               :org:
** Fill paragraphs automatically in org-mode                      :usability:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC
** Enable orgmode shortcuts                                     :keybindings:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
; (global-set-key (kbd "C-c b")  'org-iswitchb)
(global-set-key (kbd "C-c C-x C-o") 'org-clock-out)
(global-set-key (kbd "C-c C-x C-j") 'org-clock-jump-to-current-clock)
#+END_SRC

** Org-babel load languages                                        :orgbabel:
Load all my common languages
#+BEGIN_SRC emacs-lisp
;; Orgmode code-execution support my languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (plantuml . t)
   (ditaa . t)
   (dot . t)
   (C . t)
   (shell . t)
   ))
#+END_SRC

#+CAPTION: Make the shell work like an interactive bash shell
#+BEGIN_SRC emacs-lisp :results silent :exports code
(setq org-babel-default-header-args:sh
      '((:results . "output") (:shebang . "#!/bin/bash -l")))
#+END_SRC

#+CAPTION: Make python not need absurd "return"s
#+BEGIN_SRC emacs-lisp
(setq org-babel-default-header-args:python
      '((:results . "output")))
#+END_SRC

** Capture
:PROPERTIES:
:SOURCE:   [[http://sachachua.com/blog/2010/11/emacs-recording-ledger-entries-with-org-capture-templates/][Sasha Chuan blog]]
:END:

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("h" "Command line trick idea" entry
         (file "~/dev/notes/command_line_tricks.org")
         "* FLUFF %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n\n#+BEGIN_SRC shell\n%i\n#+END_SRC\n  %a")
        ("p" "Dev project idea" entry
         (file "~/org/dev_projects.org")
         "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
        ("c" "Calendar entry" entry
         (file "~/dev/notes/calendar.org")
         "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%a")))
#+END_SRC



** Org export
Do not show me section numbers in export (HTML or \latex)
#+BEGIN_SRC emacs-lisp
(setq org-export-with-section-numbers nil)
#+END_SRC

** Task tracking                                                        :log:
I want daily notes of my projects. Simple things like words and timestamp.
By default org-mode adds logged data (with z in the agenda) at the root of the relevant section.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t@)" "MEETING" "WAIT(w@/!)" "DOING(i!)" "|" "DONE(d!@)" "CANCELED(c@)")))
#+END_SRC

Such timestamps and messages should only go in the *:LOGBOOK:* drawer.
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC

** Effort estimation
Whenever I use efforts estimate, I want to consider that a day (of
work) is 8 hours, not 24 hours, see [[https://emacs.stackexchange.com/questions/15306/org-mode-clock-sum-to-count-8h-a-day-and-not-24][SO question]] and [[info:org#Effort%20estimates][efforts estimate
documentation]].

#+BEGIN_SRC emacs-lisp
(setq org-time-clocksum-use-effort-durations t)
#+END_SRC
** Org-babel source coloring                        :orgbabel:syntaxcoloring:
#+CAPTION: Make org-babel colorize source code
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-adapt-indentation nil
      org-src-preserve-indentation t)
#+END_SRC
*** Background color for code blocks
So far the code blocks are syntax-highlit by emacs. Let's add a
different background-color to them to make delimitation visual.
#+BEGIN_SRC emacs-lisp
(defface org-block-background
  '((t (:background "#444")))
  "Face used for the source block background.")
#+END_SRC
And the associated trigger code:
#+BEGIN_SRC emacs-lisp
(setq org-src-block-faces '(("emacs-lisp" org-block-background)))
#+END_SRC
**** TODO Apply the color-coding to other languages as appropriate
** Set PlantUML jar path                                                :UML:
It's usually done via ~M-x customize~.
#+BEGIN_SRC emacs-lisp
(setq org-plantuml-jar-path
      (expand-file-name "~/.emacs.d/scripts/plantuml.jar"))
#+END_SRC
Edit the path for the PlantUML major mode too
#+BEGIN_SRC emacs-lisp
;; Install Plantuml mode first
(setq plantuml-jar-path
      (expand-file-name "~/.emacs.d/scripts/plantuml.jar"))
#+END_SRC
** Ditaa diagrams
Pointing emacs to the ditaa executable
#+BEGIN_SRC emacs-lisp
(setq org-ditaa-jar-path  "~/.emacs.d/scripts/ditaa.jar")
#+END_SRC

Make ditaa diagrams "safe" to evaluate, without prompt
#+BEGIN_SRC emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "ditaa")))  ; don't ask for ditaa
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

** Ediff support
When merging org-mode files (reconciliating changes on config files at
work and at home), the default ediff buffer would not work: the buffer
is folded, so pressing ~n~ does not jump to next conflict. To fix
this, I make ediff expand the whole file (show all):
#+BEGIN_SRC emacs-lisp
(add-hook 'ediff-prepare-buffer-hook #'show-all)
#+END_SRC
** TODO Autolist
See [[https://github.com/calvinwyoung/org-autolist][Github page]]
** Async code execution
Via [[https://github.com/astahlman/ob-async][ob-async package]] available via MELPA. All code blocks with
~:async~ are now executed non-blockingly.
#+BEGIN_SRC emacs-lisp
(use-package ob-async
  :ensure ob-async)

#+END_SRC
** Subscript and superscript
Stop orgmode from interpreting something_underscore into a subscript.
#+BEGIN_SRC emacs-lisp
(setq org-export-with-sub-superscripts "{}")
(setq org-use-sub-superscripts "{}")
#+END_SRC
** Presentation generator
Using [[https://github.com/yjwen/org-reveal][ox-reveal]] package.
Customize the title slide to show title, author, and date.
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure
  :config
  (setq org-reveal-title-slide "<h1>%t</h1>
<h3>%a</h3>
<p>%d</p>"))
#+END_SRC

** Remove validate link in unstyled HTML exports
When exporting to HTML from Org, especially when I don't use a styling
package, there's this big HTML validate link that annoys me. Toggle it
off.

#+BEGIN_SRC emacs-lisp
(setq org-html-validation-link nil)
#+END_SRC
* C++                                                                   :cpp:
** Modern C++ font-lock
:PROPERTIES:
:SOURCE:   [[https://github.com/ludwigpacifici/modern-cpp-font-lock][Github]]
:END:
By default, some of the C++14 and C++17 niceties aren't well
font-locked. Fixed by adding this module.

#+BEGIN_SRC emacs-lisp
(use-package modern-cpp-font-lock
  :ensure t
  :config (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode))
#+END_SRC
** Indentation                                                    :codestyle:
#+BEGIN_SRC emacs-lisp

;; style I want to use in c++ mode
(c-add-style "my-style"
             '("stroustrup"
               (indent-tabs-mode . nil)        ; use spaces rather than tabs
               (c-basic-offset . 2)            ; indent by two spaces
               (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
                                   (brace-list-open . 0)
                                   (statement-case-open . +)))))

(defun my-c++-mode-hook ()
  (c-set-style "my-style")        ; use my-style defined above
  (auto-fill-mode)
  (c-toggle-auto-hungry-state -1))
;; Trigger my-style when entering c++-mode
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
#+END_SRC
** Parenthesis matching                                :cosmetic:readability:
Using =rainbow-delimiters= for top-level visibility of braces and
parens. Copying colors from from [[https://ericscrivner.me/2015/06/better-emacs-rainbow-delimiters-color-scheme/][better color scheme for
rainbow-delimiters]] article.

Also, change the colors of mismatched parens to be more visible (bright red
in inverse colors from background)
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init
  (setq rainbow-delimiters-max-face-count 7)
  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "dark orange")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "deep pink")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "chartreuse")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "deep sky blue")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "yellow")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "orchid")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "spring green")
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :inverse-video t
                      :foreground "red"
                      :inherit 'rainbow-delimiters-base-face)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

Show paren mode for showing matching brace under the cursor
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC


** GTAGS integration to helm                                     :helm:gtags:
#+BEGIN_SRC emacs-lisp
;; Enable Helm with GTAGS in C and C++ mode
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Enable Helm with GTAGS in C and C++ mode
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Helm-gtags settings (unsure what they do)
(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 helm-gtags-fuzzy-match t
 )
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Adds keybindings for helm
(eval-after-load "helm-gtags"
  '(progn
     (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
     (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
     (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
     (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
     (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
     (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)))
#+END_SRC
** Highlighting FIXMEs and TODOs                          :cosmetic:disabled:
Disabled coz breaks things
#+BEGIN_SRC emacs-lisp :tangle no
;; TODO/FIXME highlight enabled fuckup
(require 'fic-mode)
(add-hook 'c++-mode-hook 'turn-on-fic-mode)

#+END_SRC
*** DONE Show all TODO/FIXME in a project
:LOGBOOK:
- State "DONE"       from "TODO"       [2016-12-16 Fri 10:55]
:END:
Feasible with ~M-x occur~ or ~projectile-multi-occur~.
** Source parsing                                                  :disabled:
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+END_SRC
** ROS message files major mode                           :cosmetic:ROS:mode:
ROS Messages, Actions and Services files are basically YAML. I would
like yaml-mode to be used when opening them, for the syntax-highlight.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.action\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.srv\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.msg\\'" . yaml-mode))
#+END_SRC
** Use c++-mode for .h files                                 :usability:mode:
At work we use .h files for C++ headers, but emacs insists on
triggering =c-mode=.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC
** TODO Go to method/variable definition                               :helm:
Find a way to go to definition of that method.
Helm-gtags can do that. See [[https://tuhdo.github.io/c-ide.html][C++ IDE setup]].
** RTags for navigation
From [[https://github.com/dfrib/emacs_setup][this guide]]. Need to export the =compile-commands.json= file from
a CMake invokation, which requires small changes to the projects.

*** Installing RTags

Clone repo
#+BEGIN_SRC shell :tangle no
git clone --recursive https://github.com/Andersbakken/rtags.git
cd rtags
mkdir build
cd build
cmake ..
make
sudo make install
#+END_SRC


* Compilation                                                  :compilation:
*** Compilation buffer coloring support
Make compilation buffers support ANSI terminal coloring (eg: CMake)
#+BEGIN_SRC elisp
;; Adds ANSI Color support to Compilation window
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

*** DONE Compilation of project (using makefile)
:LOGBOOK:
- State "DONE"       from "TODO"       [2016-12-16 Fri 10:55]
:END:
While in one file 3 level down the project root, call =compile=
without specifying project root (with relative path). ~M-x compile~
then specify ~-C ~/dev/workspace/project-name~. Projectile could help
there too

*** Compilation keybinding                                       :keybinding:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f9>") 'recompile)
(global-set-key (kbd "S-<f9>") 'compile)
#+END_SRC
*** Jump to error files                                            :disabled:
There's a minor mode that allows to auto-jump to error locations in
compilations buffers : ~next-error-follow-minor-mode~. (It also works
in search buffers). See [[info:emacs#Compilation%20Mode]].
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'compilation-mode-hook 'next-error-follow-minor-mode)
#+END_SRC
Disabled because all my code is compiled within docker which causes
the jump to fail, requesting me to find the adequate path.
Until I can make it understand that =/catkin_ws= is equal to
=~/dev/workspace/=, no point enabling this
*** Auto-follow till error
See [[info:emacs#Compilation][Emacs manual]].
#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC
*** System-wide notification of completion
:PROPERTIES:
:SOURCE:   http://emacs.stackexchange.com/a/14188
:END:
On compilation complete, when the compilation window is not front and
center, throw a popup with compilation information.
#+BEGIN_SRC emacs-lisp
(defun compilation-finished-unfocused-notify (buffer desc)
  "Popup via libnotify on compilation finished with unfocused window"
  (interactive)
  (if (not (eq buffer
	       (window-buffer (selected-window))))
      (alert
       (format "Compilation %s"
	       (if (string-equal "finished\n" desc)
		   "succeeded"
		 "failed"))
       :title "Emacs"
       :category 'emacs :style 'libnotify
       :icon "gnome-inhibit-applet")))
(add-hook 'compilation-finish-functions 'compilation-finished-unfocused-notify)
#+END_SRC

*** Hide async processes when no output
#+BEGIN_SRC emacs-lisp
(setq async-shell-command-display-buffer nil)
#+END_SRC

* Yasnippets
Text macros, expanding short snippets into arbitrary length text.
Effectively giving user a template system.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))
#+END_SRC

Separate file with snippets at [[file:snippets.org]] (in this folder).
#+INCLUDE: snippets.org

* Elpy                                                  :python:IDE:disabled:
(Don't) Use [[https://github.com/jorgenschaefer/elpy][Elpy]].
From the readme:
#+BEGIN_SRC shell :tangle no
pip install jedi flake8 importmagic autopep8
#+END_SRC
and on the emacs side of things, install their repository
#+BEGIN_SRC emacs-lisp :tangle no
(require 'package)
(add-to-list 'package-archives
             '("elpy" . "https://jorgenschaefer.github.io/packages/"))
#+END_SRC
then install the package =elpy=, and use the following conf
#+BEGIN_SRC emacs-lisp :tangle no
(elpy-enable)
#+END_SRC

Reason for disabling is it: takes over much of the native python mode
(making it harder to use a blank emacs anymore) and gives very little
useful features. It does turn emacs into an IDE experience, but at the
expense of everything that matters: speed (blocking syntax analysis
slows emacs to a crawl) and lack of configurability. It feels like
installing spacemacs: features are all in there, maybe, but I lose the
incremental feature-building "build-your-own-editor kit" that made me
choose Emacs in the first place.
* Git                                                                   :git:
** Git gutter
Show diff-lines by the file fringe
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :config (global-git-gutter-mode +1))
#+END_SRC

More info at https://github.com/syohex/emacs-git-gutter
** Merge-tool "take both" option
While using emerge (merge conflict resolution tool), I sometimes need
an option to "take both versions" (From [[http://stackoverflow.com/a/29757750][stackoverflow]])

#+CAPTION: Adds a "take both" option to merge conflict resolution and bind it to d
#+BEGIN_SRC emacs-lisp
(defun ediff-copy-both-to-C ()
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
(defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
(add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)
#+END_SRC
** Ediff no separate window
The conflict resolution tool, by default in GUI Emacs, opens a
separate tiny frame (<5x5 chars) to control the diff buffer. This is often
easy to miss, isn't pretty. See [[info:ediff#Window%20and%20Frame%20Configuration][Ediff Manual]] for details.
#+BEGIN_SRC emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
** Magit                                                              :magit:
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC
*** Show word-diff                                                 :cosmetic:
Shows the equivalent of =git diff --word-diff=
#+BEGIN_SRC emacs-lisp
(setq magit-diff-refine-hunk 'all)
#+END_SRC

*** Git graph shortcuts                                         :keybindings:
#+CAPTION: Rebind Alt-F12 to magit-status
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-<f12>") 'magit-status)
#+END_SRC
#+CAPTION: Rebind Ctrl-Alt-F12 to magit-status
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "S-<f12>") 'magit-log-all-branches)
#+END_SRC
*** Orgit                                                               :org:
Link to magit buffers from Org documents.
Install the package ~orgit~. See the documentation in [[https://github.com/magit/orgit][package Github page]].

#+CAPTION: Using orgit in git repos
#+BEGIN_EXAMPLE
orgit:/path/to/repo/           links to a magit-status buffer
orgit-log:/path/to/repo/::REV  links to a magit-log buffer
orgit-rev:/path/to/repo/::REV  links to a magit-revision buffer
#+END_EXAMPLE

* Latex                                                               :latex:
Use =auctex= and =preview-latex-mode=. Using =xetex= backend
#+BEGIN_SRC emacs-lisp
(use-package tex-mode
  :ensure auctex
  :config
  (setq tex-engine 'xetex))
#+END_SRC

Preview pane should be enabled by default on Latex documents
#+BEGIN_SRC emacs-lisp
(use-package latex-preview-pane
  :config
  (latex-preview-pane-enable))
#+END_SRC
* Major modes
Major emacs modes I use mostly for syntax highlighting
** Restructured text
:PROPERTIES:
:SOURCE:   [[https://github.com/masayuko/ox-rst][ox-rst Github page]]
:END:
#+BEGIN_SRC emacs-lisp
(use-package ox-rst)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC
** LDAP
#+BEGIN_SRC emacs-lisp
(use-package ldap)
#+END_SRC
** Ansible
Using =ansible= package, see [[https://github.com/k1LoW/emacs-ansible][Github link]].
Provides a gazillion snippets for ansible-related yaml scripts
#+BEGIN_SRC emacs-lisp
(use-package ansible)
#+END_SRC
Disabled auto-enabling with the hook:

#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
#+END_SRC

** Docker-compose
#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode)
#+END_SRC

** Vagrantfiles
Vagrantfiles need to open with =ruby-mode=
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("Vagrantfile\\'" . ruby-mode))
#+END_SRC

** JSON
Sometimes, all you need is fiddling with JSON data.
#+BEGIN_SRC emacs-lisp
(use-package json-mode)
#+END_SRC

** PHP
For some admin work with Phabricator, I need to edit PHP files.
Install the related mode to fulfill the requirement.
#+BEGIN_SRC emacs-lisp
(use-package php-mode)
#+END_SRC

** Gherkin
I love Behaviour-driven development, and its main weapon: Gherkin
language. A good soul created feature-mode, to enable editing Gherkin
feature files.
#+BEGIN_SRC emacs-lisp
(use-package feature-mode)
#+END_SRC

Because I believe in using Gherkin even without the frameworks behind
it, I'd like to be able to take a C++ test, annotate with Gherkin in
comments, and review it too. Provided I use CAPS for keywords.
#+BEGIN_SRC emacs-lisp
(defun show-gherkin ()
  "Show the gherkin features of this buffer in a separate window"
  (interactive)
  (occur "GIVEN\\|WHEN\\|THEN\\|AND\\|BUT\\|SCENARIO\\|BACKGROUND\\|FEATURE"))
#+END_SRC

** Protobuf
Recently started using Protobuf at work, so here goes the major mode.

#+BEGIN_SRC emacs-lisp
(use-package protobuf-mode)
#+END_SRC
* Editing
** Unfill
When editing text, sometimes I need to revert the line truncation that
=fill-mode= provides. Here's a handy snippet from [[https://www.emacswiki.org/emacs/UnfillParagraph][the internet]] to do
just that.

#+BEGIN_SRC emacs-lisp
(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with
    `visual-line-mode'."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))

;; Handy key definition
(define-key global-map (kbd "C-M-Q") 'unfill-region)

    ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))

;; Handy key definition
(define-key global-map (kbd "M-Q") 'unfill-paragraph)
#+END_SRC
** Identify non-ASCII chars
Found this really handy when debugging a file with non-obvious UTF8 chars that isn't handled by code
#+BEGIN_SRC emacs-lisp
(defun find-first-non-ascii-char ()
  "Find the first non-ascii character from point onwards."
  (interactive)
  (let (point)
    (save-excursion
      (setq point
            (catch 'non-ascii
              (while (not (eobp))
                (or (eq (char-charset (following-char))
                        'ascii)
                    (throw 'non-ascii (point)))
                (forward-char 1)))))
    (if point
        (goto-char point)
        (message "No non-ascii characters."))))
#+END_SRC
Of course there are alternatives, but they're not Emacsy. Using =grep=
on the region comes to mind to search for characters in range [1,127].
** CamelCase to snake_case convert
:PROPERTIES:
:SOURCE:   [[https://stackoverflow.com/questions/9288181/converting-from-camelcase-to-in-emacs]]
:END:

#+BEGIN_SRC emacs-lisp
(defun to-snakecase ()
  (interactive)
  (progn
    (replace-regexp "\\([A-Z]\\)" "_\\1" nil (region-beginning) (region-end))
    (downcase-region (region-beginning) (region-end))))
#+END_SRC

* Locale                                                             :locale:
:PROPERTIES:
:CREATED:  [2017-10-12 Thu 17:33]
:END:
** Double spacing navigation
By default emacs assumes the American typist system of 2 spaces after
a sentence-ending character (like ~.~). This makes using ~M-e~ navigation
difficult, as I only space my sentences once, as europeans (the
French?) do.

#+CAPTION: Make emacs use single-spaced sentences
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

* Navigation                                           :usability:keybinding:
** Window movement
Switching emacs windows with ~C-x o~ works with two windows, but with
more it gets very annoying. The [[https://github.com/abo-abo/ace-window][ace-window]] package aims to solve that
by binding ~M-p~ to it (faster than default).
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config
  (global-set-key (kbd "C-;") 'ace-window))
#+END_SRC
** Jump around buffer                                              :disabled:
:PROPERTIES:
:CREATED:  [2017-10-23 Mon 10:31]
:END:
:LOGBOOK:
- Note taken on [2017-10-23 Mon 10:31] \\
  Disabled since the =C-s= override is driving me nuts: type the first
  letters of search too slow and you jump around.
  We'll see if I re-enable it later bound to a different place.
:END:
Use =ace-iseach=[fn::[[https://github.com/tam17aki/ace-isearch]]] for
replacing ISearch with a jump-around-buffer thing. When typing =C-s=,
it dispatches the right search system.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ace-isearch
  :config
  (global-ace-isearch-mode +1))
#+END_SRC
** Hide-show blocks
:PROPERTIES:
:SOURCE:   [[https://writequit.org/articles/working-with-logs-in-emacs.html][viewing logs in emacs]]
:END:
Allow hiding blocks like json or C++ functions.

#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :bind (("C-c TAB" . hs-toggle-hiding)
         ("C-\\" . hs-toggle-hiding)
         ("M-+" . hs-show-all))
  :init (add-hook #'prog-mode-hook #'hs-minor-mode)
  :diminish hs-minor-mode
  :config
  (setq hs-special-modes-alist
        (mapcar 'purecopy
                '((c-mode "{" "}" "/[*/]" nil nil)
                  (c++-mode "{" "}" "/[*/]" nil nil)
                  (java-mode "{" "}" "/[*/]" nil nil)
                  (js-mode "{" "}" "/[*/]" nil)
                  (json-mode "{" "}" "/[*/]" nil)
                  (javascript-mode  "{" "}" "/[*/]" nil)))))
#+END_SRC
** Path in json block
Use with =jsons-print-path= when in a json object, reveals the path to
go through it. Only used it a couple of times, but that's the kind of
confort tool that saves time.
#+BEGIN_SRC emacs-lisp
(use-package json-snatcher)
#+END_SRC
** Minimap                                                         :disabled:
:PROPERTIES:
:CREATED:  [2018-04-22 Sun 22:48]
:END:
Similar to the Sublime minimap, triggers using =minimap-mode= in
programming modes
#+BEGIN_SRC emacs-lisp :tangle no
(use-package minimap-mode)
#+END_SRC
** Silver searcher
Installing =silver-searcher= for quick code lookup instead of
=projectile-grep=. [[https://github.com/ggreer/the_silver_searcher][Ag link]]

#+BEGIN_SRC emacs-lisp
(use-package helm-ag)
#+END_SRC
** Debugging                                                       :disabled:
:PROPERTIES:
:CREATED:  [2017-12-12 Tue 11:23]
:END:
Experiment with =realgud= ([[https://github.com/realgud/realgud][Github link]]), a modern debugger interface
improving upon the native Emacs one. Somehow I got used to the weird
keyboard shortcuts of the default debugger, so the new shortcuts are
bugging me.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package realgud)
#+END_SRC
*** DONE Rebinding C-x b to helm-mini                       :keybinding:helm:
:LOGBOOK:
- State "DONE"       from "TODO"       [2016-12-16 Fri 10:57]
:END:
#+BEGIN_SRC elisp
   (global-set-key (kbd "C-x b") 'helm-mini)
#+END_SRC

*** Helm-projectile integration                             :helm:projectile:
Enable helm first:
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
#+END_SRC

Enable the projectile integration:
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :config (helm-projectile-on)
  ;; asks for file to open when project is switched
  (setq projectile-switch-project-action 'helm-projectile-find-file))
#+END_SRC
Make projectile use helm for project-switching (rather than ido)
#+BEGIN_SRC emacs-lisp
#+END_SRC
Use =F7= to jump files and =shift-F7= to switch project
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f7>") 'helm-projectile-find-file-dwim)
(global-set-key (kbd "S-<f7>") 'helm-projectile-switch-project)
#+END_SRC

Search amongst the project with =C-c s=
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s") 'helm-projectile-ag)
#+END_SRC
Find-and-replace over project with =C-c %=
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c %") 'projectile-replace)
#+END_SRC

* Kill this buffer                                 :keybinding:controversial:
When pressing the usual buffer-kill keychord, always want to kill the
current buffer (for larger killings I use ~C-x C-b~).
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC
* Same-frame speedbar                                             :speedbar:
A neat project tree system that doesn't invade into a different frame.
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar
  :config
  ; show all filetypes (not just indexed ones)
  (setq speedbar-show-unknown-files t))
#+END_SRC
*** Speedbar in projectile                              :speedbar:projectile:
Use ~projectile-speedbar~ package (see [[https://github.com/anshulverma/projectile-speedbar#projectile--speedbar][Github project page]])
#+CAPTION: Opens the sr-speedbar when pressing Alt F3 in a projectile-owned buffer
#+BEGIN_SRC emacs-lisp
(require 'projectile-speedbar)
(global-set-key (kbd "M-<f3>") 'projectile-speedbar-open-current-buffer-in-tree)
#+END_SRC

* Typing text over selection deletes selection                    :usability:
Default emacs behavior on typing inside selected region is to
de-select and append typed text. I'd rather have it replace the text.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC
* Undo tree                                                  :usability:undo:
Enable it everywhere (replacing the common undo into a tree of file
modification).
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC

Use ~C-x u~ to open the undo-tree view, optionally ~d~ to view the
diff of each change to undo. ~q~ quits the session.
Note that the original keybinding of =C-/= still points to default
undo, making the occasional undo-tree freeze tolerable.

* Multiple terminals                                               :terminal:
Use ~multi-term~ for cool terminals in emacs, using [[http://paralambda.org/2012/07/02/using-gnu-emacs-as-a-terminal-emulator/][this
configuration]]. Press F5 to open a terminal in the current buffer's
directory, Control + Pageup/Pagedown to switch between running
terminals .

#+BEGIN_SRC emacs-lisp
(when (require 'multi-term nil t)
  (global-set-key (kbd "<f5>") 'multi-term)
  (global-set-key (kbd "<C-next>") 'multi-term-next)
  (global-set-key (kbd "<C-prior>") 'multi-term-prev)
  (setq multi-term-buffer-name "term"
        multi-term-program "/bin/bash"))
#+END_SRC

Some extra configuration for when I'm in the terminal itself:
Switching term mode to line (from char by default) means emacs only
sends text to terminal at newlines, which allows for the regular emacs
text-editing experience, but disables handy things like autocomplete
(since the terminal never sees your half-written file path until you
press enter). Comint-clear-buffer tells emacs to erase all the current
buffer, which is a little more extreme than just calling =clean= from
within (or using =C-l=), which only jumps a line and tells the
emulator to scroll up to here. Since our terminal buffer history is
unlimited in size (see below), this allows us to clear megabytes-long
buffer history.
#+BEGIN_SRC emacs-lisp
(setq term-bind-key-alist
        (list
         (cons "C-c C-j" 'term-line-mode)
         (cons "C-c C-k" 'term-char-mode)
         (cons "C-c C-l" 'comint-clear-buffer)
       (cons "C-c C-c"  'term-interrupt-subjob)
       (cons "C-p" 'previous-line)
       (cons "C-n" 'next-line)
       (cons "M-f" 'term-send-forward-word)
       (cons "M-b" 'term-send-backward-word)
       (cons "M-DEL" 'term-send-backward-kill-word)
       (cons "M-d" 'term-send-forward-kill-word)
       (cons "<C-left>" 'term-send-backward-word)
       (cons "<C-right>" 'term-send-forward-word)
       (cons "C-r" 'term-send-reverse-search-history)
       (cons "M-p" 'term-send-raw-meta)
       (cons "M-y" 'term-send-raw-meta)
       (cons "C-y" 'term-send-raw)))
#+END_SRC

Good syntax but bad configuration, from [[https://github.com/aborn/emacs.d/blob/master/utils/multi-term-config.el][alternate configuration]]
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'term-mode-hook
          (lambda ()
            ;; 下面设置multi-term buffer的长度无限
            (setq term-buffer-maximum-size 0)
            (add-to-list 'term-bind-key-alist '("C-c C-c" . term-interrupt-subjob))
            ; (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
            ; (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))
            ; (add-to-list 'term-bind-key-alist '("C-a" . ab/move-beginning-of-line))
            ; (add-to-list 'term-bind-key-alist '("M-k" . ab/kill-line))
            ; (add-to-list 'term-bind-key-alist '("C-d" . ab/delete-char))
            ; (add-to-list 'term-bind-key-alist '("C-b" . ab/backward-char))
            ; (add-to-list 'term-bind-key-alist '("C-f" . ab/forward-char))
            ; (add-to-list 'term-bind-key-alist '("M-l" . ab/extend-selection)) ;; error
(setq show-trailing-whitespace nil)))
#+END_SRC

* Dired customizations                                                :dired:
** Dired change permissions
:PROPERTIES:
:SOURCE:   [[http://pragmaticemacs.com/emacs/batch-edit-file-permissions-in-dired/][pragmaticemacs blog]]
:END:
I can change the permissions of files in a dired buffer by setting the
buffer as editable (disable read-only, bound to =C-x C-q=)
#+BEGIN_SRC emacs-lisp
(setq wdired-allow-to-change-permissions t)
#+END_SRC
** Dired search via narrow
:PROPERTIES:
:SOURCE:   [[http://pragmaticemacs.com/emacs/dynamically-filter-directory-listing-with-dired-narrow/][pragmaticemacs blog]]
:END:
I can do a live-filter of a dired buffer akin to searching that
narrows the buffer to my selection. Coupled with other dired commands,
this allows to perform actions on a regex-based subset of a folder.

#+BEGIN_SRC emacs-lisp
;;narrow dired to match filter
(use-package dired-narrow
  :ensure t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
#+END_SRC
** Dired-X enable
:PROPERTIES:
:SOURCE:   [[info:dired-x#Installation][Dired-X info page]]
:END:
Load the dired extensions (including pressing I/N on an info/man page
to open with info/man mode, and much more)
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-load-hook
               (lambda ()
                 (load "dired-x")
                 ;; Set dired-x global variables here.  For example:
                 ;; (setq dired-guess-shell-gnutar "gtar")
                 ;; (setq dired-x-hands-off-my-keys nil)
                 ))
     ;; (add-hook 'dired-mode-hook
     ;;           (lambda ()
     ;;             ;; Set dired-x buffer-local variables here.  For example:
     ;;             ;; (dired-omit-mode 1)
     ;;             ))
#+END_SRC
Also force-enable the =dired-jump= keybinding in all modes (its prefix
is sometimes overriden by the XMPP client I use at work)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-j") 'dired-jump)
#+END_SRC
** Neotree?                                                        :disabled:
:PROPERTIES:
:SOURCE:   [[https://github.com/jaypei/emacs-neotree][Neotree Github]]
:END:
A modern alternative to sr-speedbar, but it's not quite useful yet.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package neotree
  :ensure t
  :bind (([f8] . neotree-toggle))
  :config
  (setq neo-autorefresh nil)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
See [[https://github.com/jaypei/emacs-neotree/issues/149][Github issue : Projectile interaction]], [[https://emacs.stackexchange.com/questions/33632/stopping-neotree-from-constantly-switching-to-the-open-files-directory][SO similar question]]

Can also use all-the-icons-fonts
*** All-the-icons.el                                               :disabled:
See [[https://github.com/domtronn/all-the-icons.el][Github all-the-icons.el]], a repository aggregating font-awesome and
equivalents and integrating it to emacs font property system.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package all-the-icons)
#+END_SRC
Need to do the font download once
#+BEGIN_EXAMPLE emacs-lisp
(all-the-icons-install-fonts)
#+END_EXAMPLE
* Encryption and secrets handling                                    :crypto:
GPG, passwordstore setup etc

Created a GPG key for work.
Created a passwordstore tied to it. (using =pass= executable, wrapping
GPG)

See [[https://emacs.stackexchange.com/questions/20824/how-to-use-minibuffer-instead-of-pop-up-window-for-gpg-files][GPG pin entry via emacs]] to avoid GPG popup.

See [[info:org#org-crypt][Orgmode manual on org-crypt]]
** Org-crypt                                                       :disabled:
:PROPERTIES:
:header-args: :tangle no
:END:
Encrypt the text of an org entry but not headline or properties.

#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(use-package org-crypt
  :config
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  (setq org-crypt-key nil)
                                        ; (setq auto-save-default nil)
  (setq org-crypt-disable-auto-save: 'ask))
#+END_SRC
Now, anything that has a =:crypt:= tag will be saved as GPG armored
blob.
See next subheadline for checking that, use
=org-decrypt-entry= to get cleartext.

*** Super secret field here                                           :crypt:
:PROPERTIES:
:CREATED:  [2017-05-25 Thu 11:44]
:password: The password for this field (symmetrically encrypted) is passwd
:END:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v1

jA0EAwMC4zb/dFxDeWpgyXqjXcfIkeggyCCq/5wwzgF3poZZx10WLFxE5+9rqvpH
oZBoNL+yFmoqke0D4Y8PE1RKHtQLUJLVIA7hb+m9IJSNBDSwuZSkSR5w4xXHu0jZ
6aveEV5CR0SQWrnYUOpKeA79h8mX95XMCw3EwwqckhDYaOaT8Iu4lXOz5A==
=6LdW
-----END PGP MESSAGE-----

* Emacs calendar                                                   :calendar:
** TODO Set computer location for sunrise-sunset in calendar
** TODO Calendar reminders for events                              :disabled:
:PROPERTIES:
:SOURCE:   [[http://irreal.org/blog/?p=6910][Irreal blog]]
:END:
Use =org-wild-notifier.el=, which uses =alert.el= under the hood.

#+BEGIN_SRC emacs-lisp
(use-package org-wild-notifier
  :ensure t
  :config
  ;; Any even in calendar should ring me up
  (setq org-wild-notifier-keyword-whitelist nil)

  ;; Toggle alerts on launch
  (org-wild-notifier-mode))
#+END_SRC

An example item
#+BEGIN_SRC org :tangle no
,* TODO Super important thing
:PROPERTIES:
:WILD_NOTIFIER_NOTIFY_BEFORE: 60 10 5 3 1
:END:
Do that thing super soon !!!
<2018-04-01 Sun 18:40>
#+END_SRC

* TODO Org-mode contacts database
Single file for contacts, each headline a person, tags for clustering,
properties for mapping data (phone number etc). Tailored column view
for visual inspection.

* Offline documentation                                                 :doc:
** Helm-dash
Use =helm-dash= in Emacs and bind it to =F6=

#+BEGIN_SRC emacs-lisp
(use-package helm-dash
  :config
  (helm-dash-activate-docset "C++")
  (helm-dash-activate-docset "Python 2")
  (helm-dash-activate-docset "Docker")
  (helm-dash-activate-docset "Ansible")
  (helm-dash-activate-docset "Vagrant")
  :bind
  (("<f6>" . helm-dash-at-point)))
#+END_SRC

** RFC                                                              :rfc:doc:
Browsing RFCs in emacs (from [[https://www.emacswiki.org/emacs/Irfc][emacswiki]])

#+CAPTION: Create the RFC folder path if needed
#+BEGIN_SRC shell :tangle no
mkdir -p ~/dev/doc/rfc
#+END_SRC


#+BEGIN_SRC emacs-lisp
(require 'irfc)
(setq irfc-directory "~/dev/doc/rfc/")
(setq irfc-assoc-mode t)
#+END_SRC

#+CAPTION: Change the font face for some options to match my theme
#+BEGIN_SRC emacs-lisp
;; (setq irfc-head-name-face :foreground "orange red")
(set-face-attribute 'irfc-head-name-face nil :foreground "orange red")
#+END_SRC

Opening RFCs does not automatically trigger the =irfc-mode=, so I'm
forcing it via filename recognition, forcing use of the correct mode
#+BEGIN_SRC emacs-lisp
(when (featurep 'irfc)
  (add-to-list 'auto-mode-alist '("[rR][fF][cC].*\\.txt" . irfc-mode)))
#+END_SRC
* TODO Writing RFC documents
I want to be able to write down RFC-like documents via org-mode.
Equivalent via org-spec template: See https://github.com/thi-ng/org-spec
See [[file:/home/jean-baptiste.doyon/Documents/dev-local/org-spec/README.org][README.md of clone of org-spec]].

* DocView
Keep scrolling across pages when viewing PDFs (from [[info:emacs#DocView%20Navigation][DocView manual]])
#+BEGIN_SRC emacs-lisp
(setq doc-view-continuous t)
#+END_SRC
* Room for improvement
*** Automated timestamp and ID generation on new header
See [[http://stackoverflow.com/questions/12262220/add-created-date-property-to-todos-in-org-mode][Stackoverflow question about CREATED property for headers]].
See also [[https://mrblog.nl/emacs/config.html][blog entry about the answer]].

#+BEGIN_SRC emacs-lisp :tangle no
;; Allow automatically handing of created/expired meta data.
(require 'org-expiry)
;; Configure it a bit to my liking
(setq
  org-expiry-created-property-name "CREATED" ; Name of property when an item is created
  org-expiry-inactive-timestamps   t         ; Don't have everything in the agenda view
)

(defun mrb/insert-created-timestamp()
  "Insert a CREATED property using org-expiry.el for TODO entries"
  (org-expiry-insert-created)
  (org-back-to-heading)
  (org-end-of-line)
  (insert " ")
)
#+END_SRC

I would also add the org id creation if not set:

#+BEGIN_EXAMPLE  emacs-lisp
(org-id-get-create)
#+END_EXAMPLE
Add the hook to it at the end:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-insert-heading-hook 'mrb/insert-created-timestamp)
#+END_SRC

Which makes :

#+BEGIN_SRC emacs-lisp
(require 'org-expiry)
(require 'org-id)


(setq
  org-expiry-created-property-name "CREATED" ; Name of property when an item is created
  org-expiry-inactive-timestamps   t         ; Don't have everything in the agenda view
)

(defun jb/insert-created-timestamp()
  "Insert an ID and a CREATED property using org-expiry.el"
  (org-expiry-insert-created)
  (org-id-get-create)
  ;; (org-back-to-heading)
  ;; (org-end-of-line)
  ;; (insert " ")
)
#+END_SRC

*** RSS feed monitoring
See [[info:org#RSS%20feeds][Org mode documentation about org-rss]].

Done with this:
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-feed-alist
      '(("Affaires Étrangères"
         "http://radiofrance-podcast.net/podcast09/rss_12841.xml"
         "~/org/rss-podcasts.org"
         "Affaires Étrangères"
         :template "* %h\n:PROPERTIES:\n:CREATED: %u\n:GUID: %a:END:\n%description")
        ("L'esprit public"
         "http://radiofrance-podcast.net/podcast09/rss_16119.xml"
         "~/org/rss-podcasts.org"
         "L'esprit public"
         :template "* %h\n:PROPERTIES:\n:CREATED: %u\n:GUID: %a:END:\n%description")
        ("C dans l'air"
         "https://www.youtube.com/feeds/videos.xml?channel_id=UCvg4_wSz4Cmo4xRPXaKU47A"
         "~/org/rss-podcasts.org"
         "C dans l'air"
         :parse-feed org-feed-parse-atom-feed
         :parse-entry org-feed-parse-atom-entry
         :template "* %title\n:PROPERTIES:\n:CREATED: %u\n:GUID: %a:END:\n%description")
        ;; TODO Use    :filter to only insert entries >30 minutes = the whole show, not snippets
                                        ; (string-match "[ \t]*$" test-str)
        ("Planet Emacs"
         "http://planet.emacsen.org/atom.xml"
         "~/org/rss-podcasts.org"
         "Planet Emacs"
         :parse-feed org-feed-parse-atom-feed
         :parse-entry org-feed-parse-atom-entry
         :template "* %title\n:PROPERTIES:\n:CREATED: %u\n:GUID: %a:END:\n%description")
        ))
#+END_SRC
*** DONE Remove items from modeline
:LOGBOOK:
- State "DONE"       from "TODO"       [2017-01-19 Thu 13:27] \\
  Fixed with dimished-mode
:END:
When running a split-windowed emacs, the modeline is too crowded with stuff like Projectile, beacon-mode etc.
There is a mode called Diminish mode that solves it. See [[http://emacs.stackexchange.com/questions/3925/hide-list-of-minor-modes-in-mode-line][SO on modeline too long]].

Need to evaluate what is useless in modeline depending on what I do.

See also: Smart-modeline !
*** TODO Orgmode buffer switch
When orgmode opens a buffer it's in the next buffer.
I want it to happen in a specific place to avoid messing my setup.

See http://emacs.stackexchange.com/questions/721/how-to-control-in-which-window-a-buffer-is-displayed

*** TODO Perspective mode
Emacs equivalent of virtual desktops, which you can integrate into projectile.
This would allow the organisation stuff to be in a perspective and coding to be in an other one, and invoke either in one chord.
Bonus points for popping the "IDE perspective" from a cold-boot.

*** DONE Compilation follow to first error
:LOGBOOK:
- State "DONE"       from "TODO"       [2017-02-22 Wed 14:11]
:END:
Use http://stackoverflow.com/questions/4657142/how-do-i-encourage-emacs-to-follow-the-compilation-buffer

*** Some setups

#+CAPTION: Org-mode setup from https://news.ycombinator.com/reply?id=12863388&goto=item%3Fid%3D12862608%2312863388
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org
    :bind ("C-c a" . org-agenda)
    :config
    (progn
      (setq org-agenda-files '("~/org"))
      (setq org-cycle-separator-lines 1)
      (setq org-todo-keywords '((type "TODO" "PROG" "WAIT" "|" "DONE")))
      (setq org-todo-keyword-faces '(("TODO" . "brightblack") ("WAIT" . "yellow")))))
#+END_SRC

- [[https://tuhdo.github.io/helm-intro.html][Helm intro]]
*** TODO Registers                                               :keybinding:
Binding files I access often to Emacs registers for quick access.
* Small project ideas                                           :projectidea:
Emacs-config-related odds and end I'd like to have working.
** BugTracker integration in magit
Use known commit prefixes (such as =bug15152=) as url-equivalents.
Point to a static location (like [[https://bugzilla.mozilla.org][firefox's bugzilla tracker]]) with bug
number appended.

Import the whole bugs database first to org-mode (including
properties), or learn to use command line tools like =arcanist=.

When a bug is highlighted, show the bug's name in tooltip or
minibuffer. Bug number should be clickable to visit either browser bug
or dumped org-mode entry for the bug.

See also : [[info:emacs#Goto%20Address%20mode][Emacs Manual: Goto Address mode]], and [[info:elisp#Clickable%20Text][Elisp Manual: Clickable Text]].
** Auto-Refile my entries based on the tags they use
See [[https://superuser.com/questions/1112979/automatically-refile-using-tags-in-org-mode][stackoverflow answer]]. Could expose it as a python-esque task:
Given a trained decision system and a dict-data of entry, decide point
of relocation. Boils down to dispatch rules.
** Memacs support for CalDAV                       :org:mode:calendar:memacs:
Memacs[fn::python code importing data logs to org-mode format]
supports import of ical calendar entries, but not CalDAV. Would be
great to extend to CalDAV, which could then be run as cronjob.
This would be one more step towards Emacs-only setup (no need for
Thunderbird calendar).

See existing [[https://github.com/novoid/Memacs/blob/master/memacs/ical.py][ical support in memacs]], and [[http://stackoverflow.com/a/31036500][SO reading CalDAV in Python]].
