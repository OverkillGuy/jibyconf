#+PROPERTY: header-args :tangle init.el :results silent
This is my Emacs configuration file.
It is the fruit of months of daily use and "what if I could make it
better/faster/automated ?"

Any TODO is a potential for improval.

Great resources for any emacs setup:
- [[http://doc.norang.ca/org-mode.html][NORANG init.el]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chuan's setup]]
- [[http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php][An other init.el sample]]

* Config file setup
This file is part of a git repository that I sync across devices.
** TODO Make the .emacs file point to this file			   :initfile:
** TODO [#A] Use this orgfile as init.el
See [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][Stackoverflow post on the topic]].
Uses the following code:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org)
(org-babel-load-file
 (expand-file-name "init.el"
		   user-emacs-directory))
#+END_SRC
Would need to make this a symlink to this file.
* Packages
Official repos for emacs packages
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "https ://elpa.gnu.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")))
#+END_SRC
* Cosmetic							   :cosmetic:
** Theme
I use ~tango-dark~ at home and it looks great !
At work, I use ~misterioso~.
#+BEGIN_SRC emacs-lisp  :tangle no
(load-theme 'misterioso t) ;; Theme used at work
#+END_SRC

#+BEGIN_SRC emacs-lisp
(load-theme 'tango-dark t)
#+END_SRC
** Make text readable

#+BEGIN_SRC emacs-lisp
;; Make text readable through fontsize 18
(set-face-attribute 'default nil :height 180)
#+END_SRC

** Disable graphical bars						:GUI:
Remove all the GUI tools (open,save etc) including the helpful menu bar (which takes an /entire/ character row !).
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
#+END_SRC
** Mode line aspect
I want my emacs to look cool, so I changed the mode line accordingly.
Idea came from [[http://emacs.stackexchange.com/questions/281/how-do-i-get-a-fancier-mode-line-that-uses-solid-colors-and-triangles][this Emacs Stackoverflow question]].
#+BEGIN_SRC emacs-lisp
;; Cosmetic : change modeline aspect
(require 'powerline)
(powerline-default-theme)
#+END_SRC
Because I'm not a complete hack who just copies and pastes, I changed
the colors to my liking (blue !)
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
		    :foreground "White"
		    :background "DarkBlue"
		    :box nil)
#+END_SRC
*** Remove useless mode descriptors
Clean up the mode line to hide the modes I use all the time.
#+BEGIN_SRC emacs-lisp
(require 'diminish)
(diminish 'projectile-mode " [P]")
(diminish 'undo-tree-mode)
(diminish 'git-gutter-mode)
(diminish 'helm-mode)
(diminish 'helm-gtags-mode " G")
(diminish 'beacon-mode)
(diminish 'auto-revert-mode " Rev")
#+END_SRC
** Beacon
Show the cursor's position when scrolling the window.
#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
#+END_SRC
*** Where is my cursor ???
Rebind the Pause key to make the cursor blink
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<pause>") 'beacon-blink)
#+END_SRC

* Backup files							     :backup:
These files are supposed to save my life, but I can't stand them when they're polluting my working directory.
#+BEGIN_SRC emacs-lisp
;; Make all backups out of sight !
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+END_SRC
** TODO Sasha Chuan's ALWAYS BACKUP NEVER DELETE policy

* Orgmode								:org:
** Org-babel load languages					   :orgbabel:
Load all my common languages
#+BEGIN_SRC emacs-lisp
;; Orgmode code-execution support my languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (plantuml . t)
   (ditaa . t)
   (C . t)
   (sh . t)
   ))
#+END_SRC

#+CAPTION: Make the shell work like an interactive bash shell
#+BEGIN_SRC emacs-lisp :results silent :exports code
(setq org-babel-default-header-args:sh
      '((:results . "output") (:shebang . "#!/bin/bash -l")))
#+END_SRC

#+CAPTION: Make python not need absurd "return"s
#+BEGIN_SRC emacs-lisp
(setq org-babel-default-header-args:python
      '((:results . "output")))
#+END_SRC

** Org export
Do not show me section numbers in export (HTML or \latex)
#+BEGIN_SRC emacs-lisp
(setq org-export-with-section-numbers nil)
#+END_SRC

** Task tracking							:log:
I want daily notes of my projects. Simple things like words and timestamp.
By default org-mode adds logged data (with z in the agenda) at the root of the relevant section.
#+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
       '((sequence "TODO(t)" "WAIT(w@/!)" "DOING(i!)" "|" "DONE(d!)" "CANCELED(c@)")))
#+END_SRC

Such timestamps and messages should only go in the *:LOGBOOK:* drawer.
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC

** Org-babel source coloring			    :orgbabel:syntaxcoloring:
#+CAPTION: Make org-babel colorize source code
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-adapt-indentation nil
      org-src-preserve-indentation t)
#+END_SRC
** Set PlantUML jar path						:UML:
It's usually done via ~M-x customize~.
#+BEGIN_SRC emacs-lisp
(setq org-plantuml-jar-path
      (expand-file-name "~/.emacs.d/scripts/plantuml.jar"))
#+END_SRC
** Ditaa diagrams
Pointing emacs to the ditaa executable
#+BEGIN_SRC emacs-lisp
(setq org-ditaa-jar-path  "~/.emacs.d/scripts/ditaa.jar")
#+END_SRC

Make ditaa diagrams "safe" to evaluate, without prompt
#+BEGIN_SRC emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "ditaa")))  ; don't ask for ditaa
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

** TODO Org-capture						 :orgcapture:
** Ediff support
When merging org-mode files (reconciliating changes on config files at work and at home), the default ediff buffer would not work: the buffer is folded, so pressing ~n~ does not jump to next conflict. To fix this, I make ediff expand the whole file (show all):
#+BEGIN_SRC emacs-lisp
(add-hook 'ediff-prepare-buffer-hook #'show-all)
#+END_SRC
* Speedbar							   :speedbar:

A neat file explorer for emacs
#+BEGIN_SRC emacs-lisp
;; File manager docked by default
(require 'sr-speedbar)
;; speedbar : show all filetypes (not just indexed ones)
(setq speedbar-show-unknown-files t)
#+END_SRC
** Speedbar in projectile 				:speedbar:projectile:
Use ~projectile-speedbar~ package (see [[https://github.com/anshulverma/projectile-speedbar#projectile--speedbar][Github project page]])

#+CAPTION: Opens the sr-speedbar when pressing Alt F3 in a projectile-owned buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-<f3>") 'projectile-speedbar-open-current-buffer-in-tree)
#+END_SRC

* C++									:cpp:
** Indentation							  :codestyle:
#+BEGIN_SRC emacs-lisp

;; style I want to use in c++ mode
(c-add-style "my-style"
	     '("stroustrup"
	       (indent-tabs-mode . nil)        ; use spaces rather than tabs
	       (c-basic-offset . 2)            ; indent by two spaces
	       (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
				   (brace-list-open . 0)
				   (statement-case-open . +)))))

(defun my-c++-mode-hook ()
  (c-set-style "my-style")        ; use my-style defined above
  (auto-fill-mode)
  (c-toggle-auto-hungry-state 1))
;; Trigger my-style when entering c++-mode
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
#+END_SRC
** Parenthesis matching 			       :cosmetic:readability:
Using =rainbow-delimiters= for top-level visibility of braces and parens.
#+BEGIN_SRC sh
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

Show paren mode for showing matching brace under the cursor
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC

** GTAGS integration to helm					 :helm:gtags:
#+BEGIN_SRC emacs-lisp
;; Enable Helm with GTAGS in C and C++ mode
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Enable Helm with GTAGS in C and C++ mode
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Helm-gtags settings (unsure what they do)
(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 helm-gtags-fuzzy-match t
 )
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Adds keybindings for helm
(eval-after-load "helm-gtags"
  '(progn
     (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
     (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
     (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
     (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
     (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
     (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)))
#+END_SRC
** Highlighting FIXMEs and TODOs				   :cosmetic:
#+BEGIN_SRC emacs-lisp
;; TODO/FIXME highlight enable :tangle no
(require 'fic-mode)
(add-hook 'c++-mode-hook 'turn-on-fic-mode)

#+END_SRC
*** TODO Show all TODO/FIXME in a project

** Compilation							:compilation:
*** Compilation buffer coloring support
Make compilation buffers support ANSI terminal coloring (eg: CMake)
#+BEGIN_SRC elisp
     ;; Adds ANSI Color support to Compilation window
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
     (toggle-read-only)
     (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

*** TODO Compilation of project (using makefile)
While in one file 3 level down the project root, call =compile= without specifying project root (with relative path).
** TODO Go to method/variable definition			       :helm:
Find a way to go to definition of that method.
Helm can do that
** TODO Uncomment region binding				 :keybinding:
Command exists (~M-x uncomment-region~) but is by default not bound.
Its reverse (~M-x comment-region~) is bound to  (~C-c C-c~) in C++ mode.
** TODO Yasnippets module
Yasnippets
* Git									:git:
*** Git gutter
Show diff-lines by the file fringe
#+BEGIN_SRC emacs-lisp
(global-git-gutter-mode +1)
#+END_SRC

More info at https://github.com/syohex/emacs-git-gutter
*** Orgit
Link to magit buffers from Org documents.
Install the package ~orgit~. See the documentation in [[https://github.com/magit/orgit][package Github page]].

#+CAPTION: Using orgit in git repos
#+BEGIN_EXAMPLE
orgit:/path/to/repo/           links to a magit-status buffer
orgit-log:/path/to/repo/::REV  links to a magit-log buffer
orgit-rev:/path/to/repo/::REV  links to a magit-revision buffer
#+END_EXAMPLE
*** Merge "take both" option
While using emerge (merge conflict resolution tool), I sometimes need
an option to "take both versions" (From [[http://stackoverflow.com/a/29757750][stackoverflow]])

#+CAPTION: Adds a "take both" option to merge conflict resolution and bind it to d
#+BEGIN_SRC emacs-lisp
(defun ediff-copy-both-to-C ()
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
(defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
(add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)
#+END_SRC
*** Git status shortcut
#+CAPTION: Rebind Alt-F12 to magit-status
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-<f12>") 'magit-status)
#+END_SRC
#+CAPTION: Rebind Ctrl-Alt-F12 to magit-status
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "S-<f12>") 'magit-log-all-branches)
#+END_SRC

* Emacs usability
** Double spacing navigation
By default emacs assumes the American typist system of 2 spaces after a sentence-ending character (like ~.~).
This makes using ~M-e~ navigation difficult, as I only space my sentences once.

#+CAPTION: Make emacs use single-spaced sentences
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Dead keys
My French keyboard on emacs won't type dead keys by default, this fixes it.
#+BEGIN_SRC emacs-lisp
(require 'iso-transl)
#+END_SRC

** TODO Remap C-x C-c to avoid accidentally exiting		 :keybinding:
I don't /want/ to exit emacs often (open all day for logging project progress and edit code, close it usually once a day before closing down computer to make sure all files are saved)
Use an other binding to make it less likely to exit.
** Helm							  :projectmanagement:
*** TODO Rebinding C-x b to helm-mini			    :keybinding:helm:
From the interwebs
#+BEGIN_SRC elisp
   (global-set-key (kbd "C-x b") 'helm-mini)
#+END_SRC

*** TODO Find a good sample Helm conf to improve workflow	       :helm:
- [[https://tuhdo.github.io/helm-intro.html][Helm intro]]

*** Helm-projectile integration				    :helm:projectile:
Enable helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
#+END_SRC

Enable the integration
#+BEGIN_SRC emacs-lisp
(helm-projectile-on)
#+END_SRC
Make projectile use helm for project-switching
#+BEGIN_SRC emacs-lisp
;; asks for file to open when project is switched
(setq projectile-switch-project-action 'helm-projectile-find-file)
#+END_SRC

** Projectile							 :projectile:
Takes care of some project-definitions : jumping around files in a defined project.
You define what a project is then search for files in the project.
Integrates well to Helm.
** Undo tree							   :undotree:
Enable it everywhere (replacing the common undo).
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC

Use ~C-x u~ to open the undo-tree view, then ~d~ to view the diff of
each node. ~q~ quits the session.

*** TODO Rebind the undo command to undo-tree
*** TODO Persist the buffer undo-history over
** TODO Registers						 :keybinding:
Binding files I access often to Emacs registers for quick access.
* Terminal integration						   :terminal:
Use ~multi-term~, using [[http://paralambda.org/2012/07/02/using-gnu-emacs-as-a-terminal-emulator/][this configuration]]:

#+BEGIN_SRC emacs-lisp
(when (require 'multi-term nil t)
  (global-set-key (kbd "<f5>") 'multi-term)
  (global-set-key (kbd "<C-next>") 'multi-term-next)
  (global-set-key (kbd "<C-prior>") 'multi-term-prev)
  (setq multi-term-buffer-name "term"
        multi-term-program "/bin/bash"))
#+END_SRC

Wrong syntax but good configuration:
#+BEGIN_SRC emacs-lisp
; (when (require 'term nil t) ; only if term can be loaded..
;   (setq term-bind-key-alist
;         (list (cons "C-c C-c"  'term-interrupt-subjob)
;               (cons "C-p" . 'previous-line)
;               (cons "C-n" 'next-line)
;               (cons "M-f" 'term-send-forward-word)
;               (cons "M-b" 'term-send-backward-word)
;               (cons "C-c C-j" 'term-line-mode)
;               (cons "C-c C-k" 'term-char-mode)
;               (cons "M-DEL" 'term-send-backward-kill-word)
;               (cons "M-d" 'term-send-forward-kill-word)
;               (cons "<C-left>" 'term-send-backward-word)
;               (cons "<C-right>" 'term-send-forward-word)
;               (cons "C-r" 'term-send-reverse-search-history)
;               (cons "M-p" 'term-send-raw-meta)
;               (cons "M-y" 'term-send-raw-meta)
;               (cons "C-y" 'term-send-raw))))
#+END_SRC

Good syntax but bad configuration, from [[https://github.com/aborn/emacs.d/blob/master/utils/multi-term-config.el][alternate configuration]]
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook
          (lambda ()
            ;; 下面设置multi-term buffer的长度无限
            (setq term-buffer-maximum-size 0)
            (add-to-list 'term-bind-key-alist '("C-c C-c" . term-interrupt-subjob))
            ; (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
            ; (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))
            ; (add-to-list 'term-bind-key-alist '("C-a" . ab/move-beginning-of-line))
            ; (add-to-list 'term-bind-key-alist '("M-k" . ab/kill-line))
            ; (add-to-list 'term-bind-key-alist '("C-d" . ab/delete-char))
            ; (add-to-list 'term-bind-key-alist '("C-b" . ab/backward-char))
            ; (add-to-list 'term-bind-key-alist '("C-f" . ab/forward-char))
            ; (add-to-list 'term-bind-key-alist '("M-l" . ab/extend-selection)) ;; error
(setq show-trailing-whitespace nil)))
#+END_SRC


* Emacs calendar						   :calendar:
** TODO Set computer location for sunrise-sunset in calendar
** TODO Calendar reminders for events
From [[http://emacs.stackexchange.com/questions/3844/good-methods-for-setting-up-alarms-audio-visual-triggered-by-org-mode-events][StackOverflow]]:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'notifications)

(notifications-notify :title "Achtung!"
		      :body (format "You have an appointment in %d minutes" 10)
		      :app-name "Emacs: Org"
		      :sound-name "alarm-clock-elapsed")
#+END_SRC

* Contacts
Using BBDB, see [[http://sachachua.com/blog/tag/bbdb/][Sacha chuan blog, bbdb section]]. See also [[http://emacs-fu.blogspot.co.uk/2009/08/managing-e-mail-addresses-with-bbdb.html][Using bbdb for email addresses]].
Or using Org-contact in contrib folder to export to vCard (then sync).
** BBDB Setup
You need to create the first entry so that ~M-x bbdb~ does something useful.
In my case I created myself as a contact: ~M-x bbdb-create RET Jb RET RET RET~.
Then go to the created buffer, save it. You can now version-control your created BBDB file, yay !


* Emacs tricks							     :editor:
* RFC
Browsing RFCs in emacs (from [[https://www.emacswiki.org/emacs/Irfc][emacswiki]])

#+BEGIN_SRC sh :tangle no
mkdir -p ~/dev/doc/rfc
#+END_SRC


#+BEGIN_SRC emacs-lisp
(require 'irfc)
(setq irfc-directory "~/dev/doc/rfc/")
(setq irfc-assoc-mode t)
#+END_SRC

#+CAPTION: Change the font face for some options to match my theme
#+BEGIN_SRC emacs-lisp
;; (setq irfc-head-name-face :foreground "orange red")
(set-face-attribute 'irfc-head-name-face nil :foreground "orange red")
#+END_SRC

#+RESULTS:

This section is from old work config file.
** IDE
*** TODO Project navigation
Emacs should know what my projects are (fdeco-solar etc) based on CMake and ~/dev/workspace/ folder.
Should allow to navigate to any file I ask for.
**** Using projectile ?
Integrated with helm, also gtags ?
*** JSON
**** Prettify dense JSON
Select region then ~C-\ python -m json.tool~. There's an additional prepend switch to make the command happen in-buffer.
**** TODO Packing pretty JSON

*** Highlight all occurences of word in buffer
~M-x highlight-regexp RET pattern RET RET~.
Double return because it asks for highlight-color (default yellow)
** Orgmode
*** TODO Linking documents
**** Email attachments
**** Whiteboard image

*** TODO Publishing a project
See [[http://orgmode.org/manual/Publishing.html]]
For FDECO and JoshWeaver projects.

*** TODO Bugzilla template
Each time =bug12345= is written, replace it with the link https://bugzilla.seebyte.com/show_bug.cgi?id=12345 with a link name from the original

*** TODO Link to email
*** TODO Link to git
**** Linking to branches
**** Linking to commit
**** Linking to tag

*** Line-wrap by default
To get line-wrap EVERYWHERE : ~(global-visual-line-mode t)~.
Not recommended because applies even in C++ buffers. Alternatively, enable only in current buffer with  ~M-x visual-line-mode~.
Major modes where wrapping is useful
- Org (runaway text should be contained to the window)
Harmful
- Compilation buffers
- C++ code
*** Image resizing : whiteboard
From [[http://stackoverflow.com/questions/11670654/how-to-resize-images-in-org-mode][Stackoverflow]] and [[http://lists.gnu.org/archive/html/emacs-orgmode/2012-08/msg01388.html][Orgmode maillist archive]]
~(setq org-image-actual-width nil)~ then
#+BEGIN_SRC org :tangle no
#+ATTR_HTML: :width 500px
#+ATTR_ORG: :width 500
[[~/images/example.jpg]]
#+END_SRC
**** TODO Set default image resizing to coherent value (500px ?)


* Room for improvement
*** TODO Remove items from modeline
When running a split-windowed emacs, the modeline is too crowded with stuff like Projectile, beacon-mode etc.
There is a mode called Diminish mode that solves it. See [[http://emacs.stackexchange.com/questions/3925/hide-list-of-minor-modes-in-mode-line][SO on modeline too long]].

Need to evaluate what is useless in modeline depending on what I do.

See also: Smart-modeline !
*** TODO Orgmode buffer switch
When orgmode opens a buffer it's in the next buffer.
I want it to happen in a specific place to avoid messing my setup.

See http://emacs.stackexchange.com/questions/721/how-to-control-in-which-window-a-buffer-is-displayed

*** TODO Perspective mode
Emacs equivalent of virtual desktops, which you can integrate into projectile.
This would allow the organisation stuff to be in a perspective and coding to be in an other one, and invoke either in one chord.
Bonus points for popping the "IDE perspective" from a cold-boot.

*** TODO Compilation follow to first error
Use http://stackoverflow.com/questions/4657142/how-do-i-encourage-emacs-to-follow-the-compilation-buffer

*** Some setups

#+CAPTION: Org-mode setup from https://news.ycombinator.com/reply?id=12863388&goto=item%3Fid%3D12862608%2312863388
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org
    :bind ("C-c a" . org-agenda)
    :config
    (progn
      (setq org-agenda-files '("~/org"))
      (setq org-cycle-separator-lines 1)
      (setq org-todo-keywords '((type "TODO" "PROG" "WAIT" "|" "DONE")))
      (setq org-todo-keyword-faces '(("TODO" . "brightblack") ("WAIT" . "yellow")))))
#+END_SRC
