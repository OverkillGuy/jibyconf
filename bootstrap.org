#+TITLE: Bootstrapping an Emacs configuration

In order for my Emacs configuration to become +sentient+ useful, I
need to be able to launch a single command which bootstraps the entire
emacs environment.

This involves reading my config files, and toggling the ones that are
relevant, like enabling X11-related config when the screen supports
graphics.

My config files are laid out in Org mode files, contained inside code
snippets, surrounded by the reasoning surrounding them.
The ideal bootstrapping system would load these text files, parse the
code blocks and load them. This is what I attempt to do here.

#+BEGIN_SRC emacs-lisp :tangle yes
;; Make sure we tangle from this folder
;; (cd buffer-file-name)
(require 'org)
;; Load first what requires no extra module
(org-babel-load-file "vanilla-config.org")
; Handy bash things I like too
(org-babel-tangle-file "bash_utilities.org")
;; Then what requires modules
(org-babel-load-file "config.org")
(if (display-graphic-p)
    (org-babel-load-file "config-X11.org"))
;; Android package-level usernames
(if (string-match "u[0-9]_a[0-9+]" (user-login-name))
    (org-babel-load-file "termux-emacs-config.org"))
(org-babel-tangle-file "snippets.org")
;; Optionally what requires non-emacs packages
(org-babel-load-file "external-pkg-config.org")
#+END_SRC


This repository is stored as git repo, which is set to receive new
versions of master as updates (instead of rejecting the push to
checked out branch.
#+begin_src shell
git config --local  receive.denyCurrentBranch updateInstead
#+end_src

More info in the git-config manual:

#+CAPTION: man git-config(1)
#+begin_example
       receive.denyCurrentBranch
	   [...]

	   Another option is "updateInstead" which will update the working tree if
	   pushing into the current branch. This option is intended for
	   synchronizing working directories when one side is not easily
	   accessible via interactive ssh (e.g. a live web site, hence the
	   requirement that the working directory be clean). This mode also comes
	   in handy when developing inside a VM to test and fix code on different
	   Operating Systems.
#+end_example
