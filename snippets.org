#+TITLE: Emacs snippets
#+OPTIONS: :mkdirp yes :comments no

My general Emacs configuration is available as part of the config.org
file in this folder.
But as more and more text macros were added to a subsection, I decided
it's time to migrate those to their own file, this one.

* Phabricator


** Code blocks
Using the same keybinding as =org-mode='s shortcut for code blocks.
#+CAPTION:  snippet creating a phabricator code block
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/markdown-mode/blk :mkdirp yes
# -*- mode: snippet -*-
#name : Phabricator Code block
#key : <s
# --
\`\`\`lang=${1:py},name="${2:block name}"
$0
\`\`\`
#+END_SRC



* ROS
** C++
I use ROS a lot, and there's a lot of overhead to simple actions.

#+CAPTION:  ROS_INFO snippet
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/rosinfo
# -*- mode: snippet -*-
#name : ROS INFO
#key : info
# --
ROS_INFO_STREAM("$1" << $0);
#+END_SRC

#+CAPTION:  snippet instantiating a ROS Publisher
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/rospub
# -*- mode: snippet -*-
#name : ROS Publisher
#key : pub
# --
${1: varname} = m_nodeHandle.advertise<${2:message type}>("${3:topic}", ${4:queuesize});
#+END_SRC

#+CAPTION:  Snippet creating a C++ main for ROS
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/rosmain
# -*- mode: snippet -*-
#name : Main method of C++ ROS node
#key : rosmain
# --
#include <ros/ros.h>
#include <${3:package}/$2.h>

int main(int argc, char **argv)
{
  ros::init(argc, argv, "${1:node name}");
  ${2:class name} node($0);
  ros::spin();

  return 0;
}
#+END_SRC


* Gherkin
I love the /Behaviour-driven development/ methodology, and its main
weapon: Gherkin language. These snippets are my way of using this tool
to the fullest.

** C++ Features
I want to be able to use Gherkin in my C++ tests even when the tools
aren't ready. This involves writing Gherkin in C++ comments, which I
want snippets for, for ease of use. These snippets are very similar to
the ones defined in =feature-mode=, but are caps-based comments.

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/feature :mkdirp yes
# -*- mode: snippet -*-
# key: fea
# name: Feature
# --
// FEATURE: $0
#+END_SRC


#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/given :mkdirp yes
# -*- mode: snippet -*-
# key: giv
# name: Given preconditions
# --
// GIVEN ${1:preconditions}
$0
#+END_SRC

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/when :mkdirp yes
# -*- mode: snippet -*-
# key: whe
# name: When a trigger is pulled
# --
// WHEN ${1:a trigger is pulled}
$0
#+END_SRC

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/then :mkdirp yes
# -*- mode: snippet -*-
# key: the
# name: Then assertion is true
# --
// THEN ${1:assertion is true}
$0
#+END_SRC

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/background :mkdirp yes
# -*- mode: snippet -*-
# key: bac
# name: Background
# --
// BACKGROUND:
$0
#+END_SRC

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/and :mkdirp yes
# -*- mode: snippet -*-
# key: and
# name: And something else
# --
// AND ${1:something else}
$0
#+END_SRC

#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/c++-mode/scenario :mkdirp yes
# -*- mode: snippet -*-
# key: sce
# name: Scenario
# --
// SCENARIO: $0
#+END_SRC


* Ansible
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/yaml-mode/playbook :mkdirp yes
# -*- mode: snippet -*-
#name : Simple playbook template
#key : playbook
# --
---
- hosts: webservers
  vars:
    http_port: 80
    max_clients: 200
  remote_user: root
  tasks:
  - name: ensure apache is at the latest version
    yum:
      name: httpd
      state: latest
#+END_SRC


* Org-mode

#+CAPTION:  UML diagram snippet using plantuml
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/org-mode/uml
# -*- mode: snippet -*-
#name : uml
#key : uml
# --
#+BEGIN_SRC plantuml :file ${1:image_path}.png
$0
'#+END_SRC
#+END_SRC

#+CAPTION:  Emacs-lisp snippet
#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/org-mode/elisp
# -*- mode: snippet -*-
#name : elisp
#key : elisp
# --
,#+BEGIN_SRC emacs-lisp
$0
,#+END_SRC
#+END_SRC


* Python


#+BEGIN_SRC snippet :tangle ~/.emacs.d/snippets/python-mode/shebang :mkdirp yes
# -*- mode: snippet -*-
#name : Python shebang
#key : shebang
# --
#!/usr/bin/env python
#+END_SRC
