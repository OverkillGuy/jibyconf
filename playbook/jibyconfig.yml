---
- name: Clone current repo and deploy bash/git config
  hosts: dev
  tags: [git, stow]
  tasks:
    - name: Install git for jibyconfig cloning
      become: true
      apt:
        pkg: git
        update_cache: True
    - name: Ensure ~/dev/conf/ exists for jibyconf
      file:
        path: "{{home}}/dev/conf"
        state: directory
        mode: '0755'
    - name: Ensure jibyconf repo created
      # Ideally use the git ansible module instead, but it doesn't do local-file-cloning like git CLI
      shell:
        creates: "{{home}}/dev/conf/jibyconf"
        cmd: "git clone /vagrant/ {{home}}/dev/conf/jibyconf"
    # # TODO: Register the remote bundle before fetching from it
    # - name: Update the emacs-conf repo from bundle
    #   when: emacsconf_folder.stat.exists and emacsconf_folder.stat.isdir
    #   shell: "git fetch /vagrant/data/jiby-emacsconf.bundle {{home}}/dev/conf/emacs-conf -b stowage"

# Deployment via stow

    - name: Install stow for deployment of emacs conf
      become: true
      apt:
        pkg: stow
    - name: Deploy the stow config (ignore list) via stow
      shell:
        cmd: "stow --dir ~/dev/conf/jibyconf/stow --target {{home}}/ stow --ignore=.*org"
        creates: "{{home}}/.stowrc"
    - name: Deploy the bash config via stow
      shell:
        cmd: "stow --dir ~/dev/conf/jibyconf/stow --target {{home}}/ bash"
        creates: "{{home}}/.jb_profile.sh"
    - name: Ensure ~/.bashrc sources jb_profile
      blockinfile:
        path: "{{home}}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: bash commands"
        block: source ~/.jb_profile.sh
    - name: Deploy the git config via stow
      shell:
        cmd: "stow --dir ~/dev/conf/jibyconf/stow --target {{home}}/ git"
        creates: "{{home}}/.gitconfig"
    - name: Ensure useful folders exist
      file:
        path: "{{home}}/org/"
        state: directory
